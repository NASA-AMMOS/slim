"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5028],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var i=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,a=function(e,t){if(null==e)return{};var r,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):n(n({},t),e)),r},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?i.createElement(f,n(n({ref:t},c),{},{components:r})):i.createElement(f,n({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,n=new Array(o);n[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,n[1]=s;for(var p=2;p<o;p++)n[p]=r[p];return i.createElement.apply(null,n)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1962:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1},n="SLIM Tools",s={unversionedId:"tools/README",id:"tools/README",title:"SLIM Tools",description:"This section provides an overview of tools created by the SLIM community to help implement best practices in your projects.",source:"@site/docs/tools/README.md",sourceDirName:"tools",slug:"/tools/",permalink:"/slim/docs/tools/",draft:!1,editUrl:"https://github.com/nasa-ammos/slim/tree/main/docs/tools/README.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"toolsSidebar"},l={},p=[{value:"SLIM CLI",id:"slim-cli",level:2},{value:"Demo",id:"demo",level:3},{value:"Features",id:"features",level:3},{value:"Getting Started",id:"getting-started",level:3},{value:"Requirements",id:"requirements",level:4},{value:"Installation",id:"installation",level:4},{value:"Basic Usage",id:"basic-usage",level:4},{value:"Documentation Generation",id:"documentation-generation",level:3},{value:"Unit Test Generation",id:"unit-test-generation",level:3},{value:"Learn More",id:"learn-more",level:3},{value:"SLIM Leaderboard",id:"slim-leaderboard",level:2},{value:"Demo",id:"demo-1",level:3},{value:"Features",id:"features-1",level:3},{value:"Getting Started",id:"getting-started-1",level:3},{value:"Requirements",id:"requirements-1",level:4},{value:"Installation",id:"installation-1",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Basic Usage",id:"basic-usage-1",level:4},{value:"Learn More",id:"learn-more-1",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"slim-tools"},"SLIM Tools"),(0,a.kt)("p",null,"This section provides an overview of tools created by the SLIM community to help implement best practices in your projects."),(0,a.kt)("h2",{id:"slim-cli"},"SLIM CLI"),(0,a.kt)("mermaid",{value:"flowchart TD\n    %% == Nodes representing the components ==\n    %% Using Font Awesome icons (fa: for solid, fab: for brands)\n    CLI(fa:fa-terminal SLIM CLI Tool)\n    Registry(fa:fa-database SLIM Registry)\n    GenAI(fa:fa-brain GenAI Agent)\n    GitRepos(fab:fa-git-alt Target Git Repositories)\n    %% == Interactions / Flow ==\n    %% Using numbered labels to indicate sequence\n    CLI --\x3e|Requests Best Practices| Registry\n    Registry --\x3e|Provides Best Practices| CLI\n    CLI --\x3e|Best Practices| GenAI\n    GenAI --\x3e|Applies Customized Best Practices| GitRepos\n    CLI --\x3e|Applies Generic Best Practices| GitRepos\n    %% == Styling ==\n    %% Node Styling\n    style CLI color:#FFFFFF, fill:#2962FF, stroke:#000, stroke-width:2px, font-weight:bold\n    style Registry color:#000000, fill:#ce9790 , stroke:#000, stroke-width:2px\n    style GenAI color:#FFFFFF, fill:#00C853, stroke:#000, stroke-width:2px, font-weight:bold\n    style GitRepos color:#FFFFFF, fill:#FF9800, stroke:#000, stroke-width:2px\n    %% == Link Styling for Visibility ==\n    %% Default style for all links (arrows)\n    linkStyle default stroke-width:2px, stroke:#333\n    %% Optional: Style specific links if needed (example below, uncomment to use)\n    linkStyle 0 stroke-width:3px,stroke:red;\n    linkStyle 1 stroke-width:3px,stroke:red;\n    linkStyle 2 stroke-width:3px,stroke:green;\n    linkStyle 3 stroke-width:3px,stroke:green;\n    linkStyle 4 stroke-width:3px,stroke:orange;"}),(0,a.kt)("p",null,"The SLIM CLI is a command-line tool designed to infuse SLIM best practices seamlessly into your development workflow. It fetches and applies structured SLIM best practices directly into your Git repositories and leverages artificial intelligence capabilities to customize and tailor the application of best practices based on your repository's specifics."),(0,a.kt)("h3",{id:"demo"},"Demo"),(0,a.kt)("p",null,"Watch SLIM CLI in action:"),(0,a.kt)("video",{controls:!0,width:"100%"},(0,a.kt)("source",{src:"/slim/img/slim-cli-example.mov",type:"video/quicktime"}),"Your browser does not support the video tag."),(0,a.kt)("h3",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Command-line interface for applying SLIM best practices into Git development workflows"),(0,a.kt)("li",{parentName:"ul"},"Fetches the latest SLIM best practices dynamically from SLIM's registry"),(0,a.kt)("li",{parentName:"ul"},"Allows customization of best practices using advanced AI models before applying them to repositories"),(0,a.kt)("li",{parentName:"ul"},"Deploys, or git adds, commits, and pushes changes to your repository's remote")),(0,a.kt)("h3",{id:"getting-started"},"Getting Started"),(0,a.kt)("h4",{id:"requirements"},"Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Python 3.7+"),(0,a.kt)("li",{parentName:"ul"},"Git"),(0,a.kt)("li",{parentName:"ul"},"An environment configuration file for AI capabilities (Azure or OpenAI)")),(0,a.kt)("h4",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Install via pip (recommended for most users)\npip install slim-cli\n\n# Verify installation\nslim --version\nslim --help\n")),(0,a.kt)("h4",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# List all available best practices\nslim list\n\n# Apply best practices to repositories\nslim apply --best-practice-ids SLIM-1.1 --repo-urls https://github.com/your-username/your-repo\n\n# Apply a best practice using AI customization\nslim apply --best-practice-ids SLIM-1.1 --repo-urls https://github.com/your-username/your-repo --use-ai azure/gpt-4o\n\n# Apply best practices and then push those changes to a new repository branch on GitHub.com - all automatically\nslim apply-deploy --best-practice-ids SLIM-1.1 SLIM 1.2 --repo-urls https://github.com/your-username/your-repo\n")),(0,a.kt)("h3",{id:"documentation-generation"},"Documentation Generation"),(0,a.kt)("p",null,"The SLIM CLI includes a website generator that can automatically create ",(0,a.kt)("a",{parentName:"p",href:"https://docusaurus.io/"},"Docusaurus")," documentation from your repository content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"TBD\n")),(0,a.kt)("h3",{id:"unit-test-generation"},"Unit Test Generation"),(0,a.kt)("p",null,"The SLIM CLI offers AI-powered test generation to automatically create unit tests for your codebase:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"TBD\n")),(0,a.kt)("h3",{id:"learn-more"},"Learn More"),(0,a.kt)("p",null,"For more detailed information about SLIM CLI, visit the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nasa-ammos/slim-cli"},"GitHub repository"),"."),(0,a.kt)("h2",{id:"slim-leaderboard"},"SLIM Leaderboard"),(0,a.kt)("p",null,"The SLIM Leaderboard is a tool that generates scan reports of SLIM best practices compliance across GitHub repositories. It helps you measure, rank, and showcase how well a set of repositories follows SLIM best practices."),(0,a.kt)("h3",{id:"demo-1"},"Demo"),(0,a.kt)("p",null,"Watch SLIM Leaderboard in action:"),(0,a.kt)("video",{controls:!0,width:"100%"},(0,a.kt)("source",{src:"/slim/img/slim-leaderboard-example.mov",type:"video/quicktime"}),"Your browser does not support the video tag."),(0,a.kt)("h3",{id:"features-1"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Generates compliance reports for GitHub repositories based on the ",(0,a.kt)("a",{parentName:"li",href:"https://nasa-ammos.github.io/slim/docs/guides/checklist#checklist"},"SLIM Getting Started Checklist")),(0,a.kt)("li",{parentName:"ul"},"Ranks repositories from most to least compliant with SLIM best practices"),(0,a.kt)("li",{parentName:"ul"},"Supports configuration via JSON to specify individual repositories or scan entire organizations"),(0,a.kt)("li",{parentName:"ul"},"Works with both GitHub.com and GitHub Enterprise repositories"),(0,a.kt)("li",{parentName:"ul"},"Utilizes GraphQL and parallelized queries for optimized performance"),(0,a.kt)("li",{parentName:"ul"},"Provides multiple output formats including tree, table, and markdown"),(0,a.kt)("li",{parentName:"ul"},"Offers a verbose mode for additional statistical details and explanations")),(0,a.kt)("h3",{id:"getting-started-1"},"Getting Started"),(0,a.kt)("h4",{id:"requirements-1"},"Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Python 3.7+"),(0,a.kt)("li",{parentName:"ul"},'GitHub personal access token (classic) with all permissions under the "repo" group, including ',(0,a.kt)("inlineCode",{parentName:"li"},"security_events"))),(0,a.kt)("h4",{id:"installation-1"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Install via pip\npip install slim-leaderboard\n\n# Verify installation\nslim-leaderboard --version\nslim-leaderboard --help\n\n# Upgrade to latest version\npip install --upgrade slim-leaderboard\n")),(0,a.kt)("h4",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Create a configuration file (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"slim-config.json"),") to specify the repositories or organizations to scan:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "targets": [\n      {\n        "type": "repository",\n        "name": "https://github.com/nasa-ammos/slim"\n      }\n  ]\n}\n')),(0,a.kt)("h4",{id:"basic-usage-1"},"Basic Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Generate a report using default settings (tree format)\nslim-leaderboard slim-config.json\n\n# Generate a report using default settings (tree format) for an adhoc repository\nslim-leaderboard --repositories https://github.com/riverma/terraformly\n\n# Generate a report in table format\nslim-leaderboard --output_format TABLE slim-config.json\n\n# Generate a verbose report in tree format\nslim-leaderboard --output_format TREE --verbose slim-config.json\n\n# Generate a markdown report with emojis instead of text for statuses\nslim-leaderboard --output_format MARKDOWN --emoji slim-config.json\n")),(0,a.kt)("h3",{id:"learn-more-1"},"Learn More"),(0,a.kt)("p",null,"For more detailed information about SLIM Leaderboard, visit the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nasa-ammos/slim-leaderboard"},"GitHub repository"),"."))}d.isMDXComponent=!0}}]);