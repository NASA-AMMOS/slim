"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4070],{3905:(e,t,n)=>{n.d(t,{Zo:()=>E,kt:()=>p});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},E=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},T="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,E=a(e,["components","mdxType","originalType","parentName"]),T=l(n),d=s,p=T["".concat(c,".").concat(d)]||T[d]||u[d]||o;return n?r.createElement(p,i(i({ref:t},E),{},{components:n})):r.createElement(p,i({ref:t},E))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[T]="string"==typeof e?e:s,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const o={title:"TESTING.md Template",sidebar_label:"TESTING.md Template"},i=void 0,a={unversionedId:"guides/software-lifecycle/continuous-testing/TESTING",id:"guides/software-lifecycle/continuous-testing/TESTING",title:"TESTING.md Template",description:"",source:"@site/docs/guides/software-lifecycle/continuous-testing/TESTING.md",sourceDirName:"guides/software-lifecycle/continuous-testing",slug:"/guides/software-lifecycle/continuous-testing/TESTING",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/TESTING",draft:!1,editUrl:"https://github.com/nasa-ammos/slim/tree/main/docs/guides/software-lifecycle/continuous-testing/TESTING.md",tags:[],version:"current",frontMatter:{title:"TESTING.md Template",sidebar_label:"TESTING.md Template"},sidebar:"guidesSidebar",previous:{title:"TESTING.md (Example)",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/TESTING-example"},next:{title:"Testing Frameworks",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/testing-frameworks"}},c={},l=[],E={toc:l},T="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(T,(0,r.Z)({},E,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown"},"# [INSERT PROJECT NAME HERE] Testing\n\n## Introduction\nThis document provides an overview of the testing architecture for [INSERT PROJECT NAME HERE]. It encompasses continuous testing concepts such as testing across the software development lifecycle as well as automated execution of tests through automation. \n\n---\n\n## Testing Categories\n\nThe below list of test categories are included in our testing setup. Further details are provided below.\n\n\x3c!-- ADD / MODIFY BELOW CATEGORIES TO AS NEEDED --\x3e\n- [ ] **Static Code Analysis:** checks code for syntax, style, vulnerabilities, and bugs\n- [ ] **Unit Tests:** tests functions or components to verify that they perform as intended\n- [ ] **Security Tests:** identifies potential security vulnerabilities\n- [ ] **Build Tests:** checks if the code builds into binaries or packages successfully\n- [ ] **Acceptance Tests:** validates against end-user & stakeholder requirements\n\n\x3c!-- CHOOSE MORE FROM THE BELOW LIST OR CREATE YOUR OWN\n- [ ] **Integration Tests**\n- [ ] **System Tests**\n- [ ] **Performance Tests**\n- [ ] **Security Tests**\n- [ ] **Usability Tests**\n- [ ] **Regression Tests**\n- [ ] **Smoke Tests**\n--\x3e\n\n\x3c!-- REPEAT THIS SECTION AS NEEDED FOR ABOVE CATEGORIES --\x3e\n### [INSERT TESTING CATEGORY HERE] Tests\n\n\x3c!-- ADD SUB-BLOCKS AS NEEDED FOR MULTIPLE TEST FILES OR GROUPS WITHIN SAME CATEGORY ABOVE --\x3e\n\x3c!-- #### [INSERT SUB-CATEGORY NAME IF MORE THAN ONE SUB-BLOCK] --\x3e\n- Location: `[INSERT RELATIVE PATH TO SUB-FOLDER / FILE / FILE PATTERN HERE]`\n- Purpose: [INSERT A 1-SENTENCE PURPOSE STATEMENT FOR TEST HERE]\n- Running Tests:\n  - Manually:\n    1. [INSERT STEP 1]\n    2. [INSERT STEP 2]\n    3. [INSERT WHERE TO VIEW RESULTS]\n  - Automatically:\n    - Frequency:\n      - [INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS, E.G. CODE CHANGES, COMMITS, ETC.]\n      - [INSERT TIMING OF WHEN YOUR TESTS KICK OFF, E.G. NIGHTLY, EVERY WEEK, ETC.]\n    - Results Location: `[INSERT PATH OR LOCATION WHERE RESULTS WILL RESIDE]`\n- Contributing:\n  - Framework Used: [INSERT YOUR TESTING FRAMEWORK OF CHOICE]\n  - Tips:\n    - [INSERT TIPS ON CONTRIBUTING TESTS HERE]\n    \x3c!-- e.g. \n    - Test every non-trivial function or method in your code\n    - Test conditions including malformed arguments and null conditions\n    > \n")))}u.isMDXComponent=!0}}]);