"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5659],{1235:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/continuous-testing-image-d5daff88dd1268e15d76b902f8a80d61.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},9162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/software-lifecycle/continuous-testing/README","title":"Continuous Testing","description":"A comprehensive guide to continuous testing in software development.","source":"@site/docs/guides/software-lifecycle/continuous-testing/README.md","sourceDirName":"guides/software-lifecycle/continuous-testing","slug":"/guides/software-lifecycle/continuous-testing/","permalink":"/slim/docs/guides/software-lifecycle/continuous-testing/","draft":false,"unlisted":false,"editUrl":"https://github.com/nasa-ammos/slim/tree/main/docs/guides/software-lifecycle/continuous-testing/README.md","tags":[],"version":"current","frontMatter":{"title":"Continuous Testing","description":"A comprehensive guide to continuous testing in software development.","sidebar_label":"Continuous Testing"},"sidebar":"guidesSidebar","previous":{"title":"CI Reference Architectures","permalink":"/slim/docs/guides/software-lifecycle/continuous-integration/reference-architecture"},"next":{"title":"TESTING.md (Example)","permalink":"/slim/docs/guides/software-lifecycle/continuous-testing/TESTING-example"}}');var i=t(4848),o=t(8453);const r={title:"Continuous Testing",description:"A comprehensive guide to continuous testing in software development.",sidebar_label:"Continuous Testing"},a=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Background",id:"background",level:3},{value:"Approach",id:"approach",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Create a TESTING.md",id:"1-create-a-testingmd",level:3},{value:"1.1 Testing Categories",id:"11-testing-categories",level:4},{value:"1.2 Example: Unit Testing",id:"12-example-unit-testing",level:4},{value:"1.3 Example: Performance Testing",id:"13-example-performance-testing",level:4},{value:"2. Write Your Tests",id:"2-write-your-tests",level:3},{value:"2.1 Example: Writing Unit Tests using Downloadable, Open Source Code Generation Models",id:"21-example-writing-unit-tests-using-downloadable-open-source-code-generation-models",level:4},{value:"2.2 Example: Writing System Tests using Downloadable, Open Source Code Generation Models and Behavior-Driven Development Frameworks",id:"22-example-writing-system-tests-using-downloadable-open-source-code-generation-models-and-behavior-driven-development-frameworks",level:4},{value:"3. Automate Your Tests",id:"3-automate-your-tests",level:3},{value:"3.1 Static Test Automation",id:"31-static-test-automation",level:4},{value:"3.2 Component Test Automation",id:"32-component-test-automation",level:4},{value:"Developers&#39; Machines",id:"developers-machines",level:5},{value:"Version Control System",id:"version-control-system",level:5},{value:"GitHub Actions",id:"github-actions",level:6},{value:"Jenkins",id:"jenkins",level:6},{value:"3.3 System Test Automation",id:"33-system-test-automation",level:4},{value:"Example: Integration Test Automation",id:"example-integration-test-automation",level:5},{value:"Example: Security Test Automation",id:"example-security-test-automation",level:5},{value:"Example: Performance Test Automation",id:"example-performance-test-automation",level:5},{value:"Example: User Interface Test Automation",id:"example-user-interface-test-automation",level:5},{value:"4. Maintain Your Tests",id:"4-maintain-your-tests",level:3},{value:"Frequently Asked Questions (FAQ)",id:"frequently-asked-questions-faq",level:2},{value:"Credits",id:"credits",level:2},{value:"Feedback and Contributions",id:"feedback-and-contributions",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("pre",{align:"center",children:"A comprehensive guide to developing a continuous testing plan, implementation, and automation approach for your project using AI tools."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"continuous-testing-representative-image",src:t(1235).A+"",width:"512",height:"512"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h3,{id:"background",children:"Background"}),"\n",(0,i.jsxs)(n.p,{children:["Continuous testing (CT) is the practice of automatically and continuously testing code changes throughout the development process to identify and address issues ",(0,i.jsx)(n.em,{children:"early"}),". The scope of CT includes testing code modules, interaction between software components, security, and user interfaces. Implementing CT is often difficult and time-consuming - we, therefore, recommend a simplified approach to get started with CT through a template and by using artificial intelligence tools like large-language models to make a test plan a reality quickly. The goal is to enable your project to identify and fix problems early, before they become major issues, leading to faster releases, improved software quality, and happier users."]}),"\n",(0,i.jsx)(n.h3,{id:"approach",children:"Approach"}),"\n",(0,i.jsx)(n.p,{children:"Our recommendation is to follow a 4-step plan for continuous testing: (1) document your test approach, (2) write your tests, (3) automate your tests, and (4) maintain your tests."}),"\n",(0,i.jsx)(n.p,{children:"The below diagram illustrates the 4-step approach."}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n    TestPlan[Write/edit a TESTING.md plan] --\x3e Implement[Write/edit your tests] --\x3e Automate[Automate/schedule tests]\n    Automate --\x3e Iterate[Change Code]\n    Iterate --\x3e Implement"}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Using artificial intelligence tools like large-language models (LLMs) to speed up test writing"}),"\n",(0,i.jsx)(n.li,{children:"Establishing a continuous testing plan that coordinates your testing goals"}),"\n",(0,i.jsx)(n.li,{children:"Automating as many of your tests as possible to run automatically"}),"\n",(0,i.jsx)(n.li,{children:"Providing frequent test results and feedback for development teams"}),"\n",(0,i.jsx)(n.li,{children:"Facilitating quicker releases"}),"\n",(0,i.jsx)(n.li,{children:"Fostering a culture of continuous improvement in software development"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.p,{children:"Although there are many steps in setting up a continuous testing architecture, the most important step is to document a shared plan of approach for your team."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"If you already have continuous testing enabled for your project"}),": we recommend documenting your plan for internal and external team members' benefit within a ",(0,i.jsx)(n.code,{children:"TESTING.md"}),". This will help you communicate your testing architecture so that team members can contribute easily to improve code through additional tests and automation. Copy/paste our below template and fill it in with your testing setup. Further steps are detailed in the (#step-by-step) guide section, which we encourage you to follow to make test writing and automation more efficient."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"If you are brand new to continuous testing"}),": we recommend starting with our (#step-by-step) guide to set up an efficient continuous testing plan for your project.\nKey Concepts to Get Started with:"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"pathname:///assets/software-lifecycle/continuous-testing/TESTING.md",children:"\u2b07\ufe0f Download and setup a TESTING.md test plan"})})," (see ",(0,i.jsx)(n.a,{href:"TESTING-example",children:"example"})," of template in action)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"pathname:///assets/software-lifecycle/continuous-testing/pre-commit-config.yaml",children:"\u2b07\ufe0f Download our .pre-commit-config.yaml"})})," for a standard code styling, formatting and linting checker"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["\ud83d\udcdd Generate unit tests automatically using a Large Language Model (LLM), such as ",(0,i.jsx)(n.a,{href:"https://ollama.com/library/codellama",children:"codellama"})," via ",(0,i.jsx)(n.a,{href:"https://ollama.com",children:"ollama"})]})," (see ",(0,i.jsx)(n.a,{href:"#21-example-writing-unit-tests-using-downloadable-open-source-code-generation-models",children:"example"})," of unit test script generation)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["\ud83e\udd16 Generate system tests automatically using an LLM, such as ",(0,i.jsx)(n.a,{href:"https://ollama.com/library/codellama",children:"codellama"})," via ",(0,i.jsx)(n.a,{href:"https://ollama.com",children:"ollama"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/robotframework/QuickStartGuide/blob/master/QuickStart.rst",children:"Robot Framework"})]})," (see ",(0,i.jsx)(n.a,{href:"#22-example-writing-system-tests-using-downloadable-open-source-code-generation-models-and-behavior-driven-development-frameworks",children:"example"})," of system test script generation)"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["\ud83d\ude80 Tie continuous testing scripts all together with a ",(0,i.jsx)(n.a,{href:"/docs/guides/software-lifecycle/continuous-integration",children:"continuous integration pipeline"})]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-Step Guide"}),"\n",(0,i.jsx)(n.p,{children:"This step-by-step guide will help you establish, write, automate, and maintain a continuous testing solution for your project."}),"\n",(0,i.jsx)(n.h3,{id:"1-create-a-testingmd",children:"1. Create a TESTING.md"}),"\n",(0,i.jsxs)(n.p,{children:["We recommend creating a ",(0,i.jsx)(n.code,{children:"TESTING.md"})," file that outlines the testing objectives and plans for your software in an easy-to-find location. This file will provide your development team and contributors with:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"A list of the types of tests you run against your software."}),"\n",(0,i.jsx)(n.li,{children:"Locations where your tests are defined."}),"\n",(0,i.jsx)(n.li,{children:"When and how your tests are run."}),"\n",(0,i.jsx)(n.li,{children:"How to contribute/modify tests."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Having this information in a single file helps guide your testing journey and adds clarity for your team."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"pathname:///assets/software-lifecycle/continuous-testing/TESTING.md",children:"\u2b07\ufe0f Download our TESTING.md Template"})})," (see ",(0,i.jsx)(n.a,{href:"TESTING-example",children:"example"})," of template in action)"]}),"\n",(0,i.jsx)(n.h4,{id:"11-testing-categories",children:"1.1 Testing Categories"}),"\n",(0,i.jsxs)(n.p,{children:['Scroll to the "Testing Categories" section within your ',(0,i.jsx)(n.code,{children:"TESTING.md"})," file and check off the testing categories relevant to your project from the provided list. You can also add your own if needed. Here are some common testing categories:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Code Analysis:"})," Checks code for syntax, style, vulnerabilities, and bugs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit Tests:"})," Tests functions or components to verify that they perform as intended."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security Tests:"})," Identifies potential security vulnerabilities."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Build Tests:"})," Checks if the code builds into binaries or packages successfully."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Tests:"})," Validates against end-user and stakeholder requirements."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once you've identified the testing categories important to your project, write a description for each using the provided template section. Be sure to include:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The purpose of that testing category."}),"\n",(0,i.jsx)(n.li,{children:"The location where the tests are stored."}),"\n",(0,i.jsx)(n.li,{children:"How the tests are triggered."}),"\n",(0,i.jsx)(n.li,{children:"The framework used for testing."}),"\n",(0,i.jsx)(n.li,{children:"Best practices or guidelines for contributing to that testing category."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"12-example-unit-testing",children:"1.2 Example: Unit Testing"}),"\n",(0,i.jsx)(n.p,{children:'In the "Unit Testing" section, explain how unit tests are structured, where they\'re stored, and how frequently they run. Include the testing framework used and best practices for writing unit tests. For example:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"/tests/unit"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Verify that individual functions or components work as intended."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Running Tests:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manually:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Navigate to the ",(0,i.jsx)(n.code,{children:"/tests/unit"})," directory."]}),"\n",(0,i.jsxs)(n.li,{children:["Run the relevant unit testing command (e.g., ",(0,i.jsx)(n.code,{children:"npm test"})," for JavaScript)."]}),"\n",(0,i.jsx)(n.li,{children:"Review results in the terminal or generated reports."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatically:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frequency:"})," Upon every commit or pull request."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results Location:"})," ",(0,i.jsx)(n.a,{href:"#",children:"GitHub Actions Unit Tests Workflow"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Framework Used:"})," Jest for JavaScript."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tips:"})," Focus on core functions and methods, use mocks for dependencies, and handle edge cases."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"13-example-performance-testing",children:"1.3 Example: Performance Testing"}),"\n",(0,i.jsx)(n.p,{children:'In the "Performance Testing" section, detail how you ensure your application can handle expected and peak loads. For example:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"/tests/performance"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Validate that the application meets performance goals under load."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Running Tests:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manually:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Navigate to the ",(0,i.jsx)(n.code,{children:"/tests/performance"})," directory."]}),"\n",(0,i.jsxs)(n.li,{children:["Run the performance testing tool command (e.g., ",(0,i.jsx)(n.code,{children:"jmeter -n -t test.jmx"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Review generated reports for analysis."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatically:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frequency:"})," Monthly stress tests or before release candidates."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results Location:"})," deployment test server's `/var/log/myapp/performance-tests.log"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Framework Used:"})," Apache JMeter."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tips:"})," Simulate peak load scenarios, monitor resource usage, and use tools like Chaos Monkey for resilience testing."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-write-your-tests",children:"2. Write Your Tests"}),"\n",(0,i.jsxs)(n.p,{children:["We recommend using ",(0,i.jsx)(n.a,{href:"testing-frameworks#for-code-development",children:"Testing Frameworks"})," when writing your tests to automate, organize, and analyze your testing efforts effectively. You can write your test code from scratch, but another way to write it is using large language models (LLMs), and specifically our recommended ",(0,i.jsx)(n.a,{href:"testing-frameworks#for-test-code-generation",children:"Test Code Generation Frameworks"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Recent studies show that large language models (LLMs) can generate test code covering up to 85% of scenarios (source: ",(0,i.jsx)(n.a,{href:"https://arxiv.org/pdf/2305.00418.pdf",children:"study"}),"). Open-source LLM tools like ",(0,i.jsx)(n.a,{href:"https://ollama.com/library/codellama",children:"codellama"})," can create initial test code, which developers can refine. Running these models locally addresses data privacy concerns. For the latest advancements, refer to the ",(0,i.jsx)(n.a,{href:"https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard",children:"code model ranking"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's our recommended approach to deciding the right model for you to use (see our full list of ",(0,i.jsx)(n.a,{href:"testing-frameworks#for-test-code-generation",children:"recommended code generation models"}),"):"]}),"\n",(0,i.jsx)(n.p,{children:"Is your code open source and permissively licensed?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Yes: We recommend high-performance cloud-based LLM models (see our ",(0,i.jsx)(n.a,{href:"testing-frameworks/#cloud-based-models",children:"recommended cloud-based models"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["No: We recommend using locally-run LLM models (e.g., ",(0,i.jsx)(n.a,{href:"https://ollama.com/library/codellama",children:"codellama"}),") for sensitive data, such as those provided by the ",(0,i.jsx)(n.a,{href:"https://ollama.com/",children:"Ollama"})," tool, to protect your code from dissemination. (\u26a0\ufe0f These models may not perform as well as cloud-based bigger models, such as ",(0,i.jsx)(n.code,{children:"GPT-4"}),". We recommend asking the LLM to generate a simple test template for you to fill out.)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"21-example-writing-unit-tests-using-downloadable-open-source-code-generation-models",children:"2.1 Example: Writing Unit Tests using Downloadable, Open Source Code Generation Models"}),"\n",(0,i.jsx)(n.p,{children:"For unit tests, please follow the steps below:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Download and Install OLLAMA:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://ollama.com",children:"OLLAMA"}),": A streamlined tool for running various LLMs, like ",(0,i.jsx)(n.code,{children:"llama3"})," and ",(0,i.jsx)(n.code,{children:"codellama"}),", locally. Follow the steps to install this tool locally."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Invoke LLM and Generate Test Code:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example script:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# calculator.py\nclass Calculator:\n   def add(self, a, b):\n      return a + b\n\n   def subtract(self, a, b):\n      return a - b\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example LLM code generation command:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'ollama run codellama "$(cat calculator.py) from the above code, write a unit test for the functions add and subtract. do not explain the code. only provide the unit test script. Add inline comments in your tests to clarify the purpose of each test. These comments should include details on the function being tested, the test type (e.g., bug fix, change request, requirements validation, anomaly reports), and any relevant context."\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The given bash script above utilizes the ollama command to execute the codellama tool, passing it the content of the file dswx_s1_validator.py as an argument within double quotes. This content is retrieved using the cat command. The purpose of this script is to run the codellama tool on the code provided in dswx_s1_validator.py and generate a unit test specifically for the get_burst_id function within that code."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"We recommend adding inline comments in your tests to clarify the purpose, including details on the function being tested, the test type (e.g., bug fix, change request), and relevant context."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Output looks like this:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:' import unittest\n from calculator import add, subtract\n \n class TestCalculator(unittest.TestCase):\n     def test_add(self):\n         """\n         Test the add function to ensure it correctly adds two numbers.\n         Test Type: Requirements Validation\n         """\n         self.assertEqual(add(2, 3), 5)\n \n     def test_subtract(self):\n         """\n         Test the subtract function to ensure it correctly subtracts two \n numbers.\n         Test Type: Requirements Validation\n         """\n         self.assertEqual(subtract(5, 2), 3)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Codellama is one example of a model available in the library. You can explore other models at ",(0,i.jsx)(n.a,{href:"https://ollama.com/library",children:"Ollama's library"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Review and Refine Generated Code:"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Developers should review the generated code, fix errors, and add any missing edge cases."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Iterate as Needed:"})}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If necessary, update the prompt and obtain a revised test code. Repeat the process until satisfactory."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Disclaimer:"})," While LLMs can generate approximately 80% of test code automatically, developers must verify and refine the remaining 20% to ensure comprehensive test coverage."]}),"\n",(0,i.jsx)(n.p,{children:"The following are suggested LLM prompts to use with automated generation."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example Prompts for Auto-generated Unit Tests:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Basic Functionality Testing:"}),'\n"Generate unit tests for a function/method that performs basic arithmetic operations (addition, subtraction, multiplication, division)."']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handling Edge Cases:"}),'\n"Create tests for a function that handles edge cases, such as zero division, boundary values, and unexpected input types."']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"String Manipulation:"}),'\n"Generate unit tests for a function that involves string manipulation, including tests for string concatenation, slicing, and length calculations."']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"List/Array Operations:"}),'\n"Create tests for functions that operate on lists/arrays, covering scenarios like element addition, removal, and list comprehensions."']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exception Handling:"}),'\n"Generate unit tests to ensure proper exception handling in functions that may encounter errors. Include tests for both expected and unexpected exceptions."']}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example Generated Unit Test:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'% ollama run codellama "Generate unit tests for a function/method that performs basic arithmetic operations (addition, subtraction, multiplication, division)"\n\nimport unittest\n\nclass TestArithmeticOperations(unittest.TestCase):\n    def test_addition(self):\n        result = add(2, 3)\n        self.assertEqual(result, 5)\n\n    def test_subtraction(self):\n        result = subtract(5, 3)\n        self.assertEqual(result, 2)\n\n    def test_multiplication(self):\n        result = multiply(4, 6)\n        self.assertEqual(result, 24)\n\n    def test_division(self):\n        result = divide(10, 5)\n        self.assertEqual(result, 2)\n\nif __name__ == "__main__":\n    unittest.main()\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"22-example-writing-system-tests-using-downloadable-open-source-code-generation-models-and-behavior-driven-development-frameworks",children:"2.2 Example: Writing System Tests using Downloadable, Open Source Code Generation Models and Behavior-Driven Development Frameworks"}),"\n",(0,i.jsxs)(n.p,{children:["System-level tests that involve interaction with external software or files can be complicated to test. Please refer to our ",(0,i.jsx)(n.a,{href:"testing-frameworks#for-system-testing",children:"System Testing section within our Testing Frameworks Guide"})," for recommended system testing tools that leverage behavior-driven development (BDD) philosophies. One such example, ",(0,i.jsx)(n.a,{href:"https://github.com/robotframework/QuickStartGuide/blob/master/QuickStart.rst",children:(0,i.jsx)(n.strong,{children:"Robot Framework"})}),", is demoed below in collaboration with Large-Language Models. Specifically, using LLMs to auto-generate Robot Framework pseudocode can help streamline the process of creating integration test cases. Complicated system testing scenarios can be simplified and written automatically using LLMs. Here's an example:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Generating Robot Framework Pseudocode with LLM"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use Codellama to generate test case pseudocode in Robot Framework syntax.","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"% ollama run codellama \"Generate a Robot Framework script to perform MFA (Multi-Factor Authentication) login. The script should navigate to the login page, fill in the username and password fields, generate a TOTP code using the provided secret, enter the TOTP code, click the 'Sign in' button, and verify that the login was successful by checking the welcome message.\"\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-robot",children:"*** Settings ***\nDocumentation    Example test suite\nLibrary          SeleniumLibrary\n*** Test Cases ***\nValid Login\n    Open Browser    https://dummy-website.com    chrome\n    Input Text      username_field    valid_username\n    Input Text      password_field    valid_password\n    Click Button    login_button\n    Page Should Contain    Welcome, User!\n\nInvalid Login\n    Open Browser    https://dummy-website.com    chrome\n    Input Text      username_field    invalid_username\n    Input Text      password_field    invalid_password\n    Click Button    login_button\n    Page Should Contain    Invalid credentials\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Direct Revision and Enhancement"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Revise the Robot Framework pseudocode as needed:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add additional steps."}),"\n",(0,i.jsx)(n.li,{children:"Include assertions for edge cases."}),"\n",(0,i.jsx)(n.li,{children:"Incorporate custom keywords or libraries."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Execution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Run the tests locally or integrate them into your CI pipeline."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By combining LLM's natural language capabilities with Robot Framework's structured format, you can efficiently create and adapt  test cases."}),"\n",(0,i.jsx)(n.p,{children:"Here is an example to generate a Robot Framework script for MFA (Multi-Factor Authentication) login with the following steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Navigate to the login page."}),"\n",(0,i.jsx)(n.li,{children:"Fill in the username and password."}),"\n",(0,i.jsx)(n.li,{children:"Generate a TOTP (Time-Based One-Time Password)."}),"\n",(0,i.jsx)(n.li,{children:"Fill in the TOTP code field."}),"\n",(0,i.jsx)(n.li,{children:'Click the "Sign in" button.'}),"\n",(0,i.jsx)(n.li,{children:"Verify that the login was successful."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple prompt to generate the script:"}),"\n",(0,i.jsx)(n.p,{children:"\"Generate a Robot Framework script to perform MFA (Multi-Factor Authentication) login. The script should navigate to the login page, fill in the username and password fields, generate a TOTP code using the provided secret, enter the TOTP code, click the 'Sign in' button, and verify that the login was successful by checking the welcome message.\""}),"\n",(0,i.jsx)(n.p,{children:"Here's the LLM output Robot Framework script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-robot",children:"*** Settings ***\nLibrary    Browser\nLibrary    totp.py\nSuite Setup    New Browser    browser=${BROWSER}    headless=${HEADLESS}\nTest Setup    New Context\nTest Teardown    Close Context\nSuite Teardown    Close Browser\n\n*** Variables ***\n${BROWSER}    chromium\n${HEADLESS}    False\n\n*** Test Cases ***\nMFA Login Test\n    Open Browser    https://example.com/login    ${BROWSER}\n    Input Text    id=username    your_username\n    Input Text    id=password    your_password\n    ${totp}    Generate TOTP    your_totp_secret\n    Input Text    id=totpcode    ${totp}\n    Click Button    id=signin_button\n    Wait Until Page Contains Element    xpath=//h1[text()='Welcome!']\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here's the test output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"% robot --pythonpath . tests\n==============================================================================\nTests                                                                         \n==============================================================================\nTests.Mfa Login                                                               \n==============================================================================\nLogin with MFA                                                        | PASS |\n------------------------------------------------------------------------------\nTests.Mfa Login                                                       | PASS |\n1 test, 1 passed, 0 failed\n==============================================================================\nTests                                                                 | PASS |\n1 test, 1 passed, 0 failed\n==============================================================================\nOutput:  MFA_Login/output.xml\nLog:     MFA_Login/log.html\nReport:  MFA_Login/report.html\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The quality of the generated test code can be compared with the example provided by Robot Framework ",(0,i.jsx)(n.a,{href:"https://docs.robotframework.org/docs/examples/mfa_login",children:"here"}),". The website name that you are testing needs to be updated, but other than that, it was perfect!"]}),"\n",(0,i.jsx)(n.h3,{id:"3-automate-your-tests",children:"3. Automate Your Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Our recommendation is to automate as many of your tests as possible using ",(0,i.jsx)(n.a,{href:"https://pre-commit.com/",children:"pre-commit"}),", a framework that manages and maintains multi-language pre-commit hooks that can be used on the client side as well as the server (VCS) side."]}),"\n",(0,i.jsx)(n.h4,{id:"31-static-test-automation",children:"3.1 Static Test Automation"}),"\n",(0,i.jsxs)(n.p,{children:["We recommend setting up a static test using ",(0,i.jsx)(n.a,{href:"pathname:///assets/software-lifecycle/continuous-testing/pre-commit-config.yaml",children:(0,i.jsx)(n.code,{children:".pre-commit-config.yaml"})}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"32-component-test-automation",children:"3.2 Component Test Automation"}),"\n",(0,i.jsxs)(n.p,{children:["Component tests refer to tests for your immediate code base, code file, or something that does not require system-level interaction. Please consult our ",(0,i.jsx)(n.a,{href:"testing-frameworks",children:"Testing Frameworks guide"})," for a choice of testing tools we recommend. Once selected, we recommend automating the execution of your tests in both of the following ways:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Execute tests locally on your developers' machines upon local Git commits"}),"\n",(0,i.jsx)(n.li,{children:"Execute tests upon Git pushes to given Git branches on your version control system (VCS) - hosted on GitHub.com or alternate"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This idea is represented in the following diagram:"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n    subgraph Developers' Machines\n        A[Local Git Commit] --\x3e|Run Component Tests| B{Tests Passed?}\n        B --\x3e|Yes| C[Locally Committed]\n        B --\x3e|No| D[Fix Code]\n    end\n\n    subgraph VCS[Version Control System e.g. GitHub]\n        E[Git Push to Specific Branch] --\x3e|Run Component Tests| F{Tests Passed?}\n        F --\x3e|Yes| G[Accept Pull Request]\n        F --\x3e|No| H[Review Code Changes]\n    end"}),"\n",(0,i.jsxs)(n.p,{children:["we recommend using ",(0,i.jsx)(n.a,{href:"https://pre-commit.com/",children:"pre-commit"}),". Here's how to set it up:"]}),"\n",(0,i.jsx)(n.h5,{id:"developers-machines",children:"Developers' Machines"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1:"})," Install ",(0,i.jsx)(n.code,{children:"pre-commit"})," on your local machine. If you are using Python, you can install it via pip:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install pre-commit\n\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 2:"})," Create a .pre-commit-config.yaml file at the root of your repository with the configuration for your Python component tests using PyTest. Here's an example template you can start with:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Python"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"repos:\n- repo: local\n   hooks:\n      - id: pytest\n         name: PyTest\n         entry: pytest\n         language: system\n         files: '\\.py$'\n         stages: [commit]\n"})}),"\n",(0,i.jsx)(n.p,{children:"This configuration assumes that you have PyTest installed and set up for your project. The files regex \\ .py$ ensures that the pre-commit hook only runs on Python files."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HCL (HashiCorp Configuration Language)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"repos:\n- repo: local\nhooks:\n   - id: terraform_fmt\n     name: Terraform Format\n     entry: terraform fmt -check\n     language: system\n     files: '\\.tf$'\n     stages: [commit]\n"})}),"\n",(0,i.jsx)(n.p,{children:"This configuration uses Terraform's built-in fmt command to format Terraform configuration files. While not a direct component test, it's a common practice to ensure code quality and consistency in HCL-based projects."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"JavaScript"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"repos:\n- repo: local\nhooks:\n   - id: jest\n     name: Jest\n     entry: npm run test\n     language: system\n     files: '\\.(js|jsx)$'\n     stages: [commit]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This setup assumes you are using Jest for testing your JavaScript projects. The npm run test command should be configured in your package.json to execute Jest tests. If using TypeScript, replace the line ",(0,i.jsx)(n.code,{children:"files: '\\.(js|jsx)$'"})," with ",(0,i.jsx)(n.code,{children:"files: '\\.(ts|tsx)$'"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Jupyter Notebook"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"repos:\n- repo: local\nhooks:\n   - id: nbtest\n     name: Notebook Test\n     entry: jupyter nbconvert --to notebook --execute --inplace\n     language: system\n     files: '\\.ipynb$'\n     stages: [commit]\n"})}),"\n",(0,i.jsx)(n.p,{children:"This configuration uses Jupyter's nbconvert tool to execute notebooks as a form of testing. It's a basic approach to running tests in Jupyter Notebooks and might need additional tooling or scripts for more comprehensive testing scenarios."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 3:"})," Install the pre-commit hook into your Git repository:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"pre-commit install\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now, every time you commit changes, your component tests will run automatically on the specified (pattern-matching) files you've staged for commit."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"version-control-system",children:"Version Control System"}),"\n",(0,i.jsx)(n.p,{children:"For automated execution of component tests upon Git pushes using a VCS, we recommend using GitHub Actions or a configuration for Jenkins:"}),"\n",(0,i.jsxs)(n.p,{children:["To invoke a ",(0,i.jsx)(n.code,{children:".pre-commit-config.yml"})," configuration from GitHub Actions or Jenkins for automated execution of unit tests upon Git pushes, follow these detailed directions:"]}),"\n",(0,i.jsx)(n.h6,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,i.jsxs)(n.p,{children:["To execute the pre-commit hooks defined in your ",(0,i.jsx)(n.code,{children:".pre-commit-config.yml"})," as part of a GitHub Actions workflow, you will create a workflow file in your repository that triggers push events. Here\u2019s how to set it up:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a Workflow File:"})," Navigate to the ",(0,i.jsx)(n.code,{children:".github/workflows"})," directory in your repository. If it doesn't exist, create it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Define the Workflow:"})," Create a new file named ",(0,i.jsx)(n.code,{children:"pre-commit-action.yml"})," (or another name of your choosing) in the workflows directory. Add the following content to this file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Pre-commit Hooks\n\non: [push]\n\njobs:\n  run-hooks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Install pre-commit\n        run: pip install pre-commit\n      - name: Run pre-commit hooks\n        run: pre-commit run --all-files\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This workflow checks out the code, sets up Python, installs pre-commit, and then runs all the pre-commit hooks defined in .pre-commit-config.yml against all files in the repository. Adjust the python-version and setup steps according to your project's needs."}),"\n",(0,i.jsx)(n.p,{children:"Commit and Push: Commit the workflow file to your repository and push it to GitHub. The workflow will automatically trigger on the next push to your repository."}),"\n",(0,i.jsx)(n.h6,{id:"jenkins",children:"Jenkins"}),"\n",(0,i.jsx)(n.p,{children:"To run the pre-commit hooks as part of a Jenkins build, you'll need to configure a Jenkins job that checks out your repository and executes the pre-commit hooks. Here's how to do it:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install Pre-commit on Jenkins:"})," Ensure that pre-commit and any language-specific runtime (like Python, Node.js) are installed on your Jenkins server or within the build environment that will run your job."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a New Jenkins Job:"}),' In Jenkins, create a new job by selecting "New Item," then choose "Freestyle project," and give it a name.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Configure Source Code Management:"}),' Under the "Source Code Management" tab, select "Git" and fill in the repository URL and credentials if necessary.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add Build Step to Execute Shell:"}),' In the "Build" section, add a build step that executes shell commands. Add the following commands:']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#!/bin/bash\n# Install pre-commit if not already installed; optional based on your setup\npip install pre-commit\n\n# Run pre-commit hooks\npre-commit run --all-files\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Save and Run the Job:"})," After configuring the job, save it and run it manually to verify that the pre-commit hooks are executed as expected."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Triggering the Job:"})," You can configure the job to be triggered on each push to your repository by using Jenkins webhooks or polling SCM, depending on your preference and setup."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"33-system-test-automation",children:"3.3 System Test Automation"}),"\n",(0,i.jsx)(n.p,{children:"System tests refer to tests that require interaction between multiple components. Not every project has this complexity. To aid in the automation of system tests, we suggest doing the following:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Have a schedule for running system tests (e.g., nightly, weekly)"}),"\n",(0,i.jsxs)(n.li,{children:["Ensure software is built and published to repositories:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stand-alone components of your software should be independently released, built, or packaged to be published on public repositories"}),"\n",(0,i.jsx)(n.li,{children:"(Optional) a final, single build of an integrated software consisting of multiple components is built, packaged, and published to a public repository"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Pull built or packaged artifacts from repositories and deploy software release (components or single package) to a virtualized environment"}),"\n",(0,i.jsx)(n.li,{children:"Test the deployed release against a set of specified system tests"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The diagram below illustrates this concept (Continuous Testing parts are highlighted in blue):"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n    subgraph SoftwareDevelopment[Software Components]\n        Code[Code Development]\n        ComponentTests{Component Tests Success?}\n        BuildComponents[Build Stand-alone Components]\n        PublishArtifacts[(Publish Artifacts to Repositories)]\n    end\n    subgraph IntegratedSoftware[Integrated Software]\n        SingleIntegratedBuild{Single Integrated Build?}\n        BuildIntegratedSoftware[Build Integrated Software]\n        PublishIntegratedArtifact[(Publish Integrated Artifact to Repository)]\n    end\n\n    subgraph TestDeployment[Testing & Deployment, e.g. nightly / weekly]\n        PullArtifacts[Pull Artifacts]\n        DeployRelease[Deploy Software Release]\n        IntegrationTests[Test Against System Tests]\n    end\n\n    Code --\x3e ComponentTests\n    style ComponentTests fill:#4169E1\n    ComponentTests --\x3e|Yes| BuildComponents\n    ComponentTests --\x3e|No| Code\n    BuildComponents --\x3e PublishArtifacts\n    SingleIntegratedBuild --\x3e|Yes| BuildIntegratedSoftware\n    style SingleIntegratedBuild fill:#4169E1\n    PublishArtifacts --\x3e BuildIntegratedSoftware\n    BuildIntegratedSoftware --\x3e PublishIntegratedArtifact\n    PullArtifacts --\x3e DeployRelease\n    DeployRelease --\x3e IntegrationTests\n    PublishArtifacts --\x3e TestDeployment\n    PublishIntegratedArtifact --\x3e TestDeployment"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Types of System Tests"})}),"\n",(0,i.jsxs)(n.p,{children:["You should outline the types of system tests you plan to implement in your ",(0,i.jsx)(n.code,{children:"TESTING.md"})," file. We suggest the following types of tests to include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Testing for integration","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Interaction between software components"}),"\n",(0,i.jsx)(n.li,{children:"Interaction with external services, provided files, exchange of messages, etc."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Testing for security","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["See existing ",(0,i.jsx)(n.a,{href:"/slim/docs/category/security",children:"SLIM security best practices"})," as part of your software development workflow."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Testing for performance and load"}),"\n",(0,i.jsx)(n.li,{children:"Testing user interfaces for gaps and compliance against policies"}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"example-integration-test-automation",children:"Example: Integration Test Automation"}),"\n",(0,i.jsx)(n.p,{children:"We recommend the following steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["For more information about applying integration testing, take a look at the following external ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/code-with-engineering-playbook/automated-testing/integration-testing/",children:"guide"})," from Microsoft Engineering Fundamentals."]}),"\n",(0,i.jsxs)(n.li,{children:["Follow the process of above ",(0,i.jsx)(n.a,{href:"#33-system-test-automation",children:"diagram"})," for integration test automation."]}),"\n",(0,i.jsxs)(n.li,{children:["Integrate your integration tests into a ",(0,i.jsx)(n.a,{href:"/docs/guides/software-lifecycle/continuous-integration",children:"Continuous Integration (CI) pipeline"}),", which will allow for the automatic execution of tests upon code changes."]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"example-security-test-automation",children:"Example: Security Test Automation"}),"\n",(0,i.jsx)(n.p,{children:"To aid in security testing automation, we recommend two steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Add security testing to your developers' local coding environment via pre-commit (see ",(0,i.jsx)(n.a,{href:"#31-static-test-automation",children:"Static Test Automation"})," section above)"]}),"\n",(0,i.jsxs)(n.li,{children:["Enable existing ",(0,i.jsx)(n.a,{href:"/slim/docs/category/security",children:"SLIM security best practices"})," as part of your software development workflow."]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"example-performance-test-automation",children:"Example: Performance Test Automation"}),"\n",(0,i.jsx)(n.p,{children:"We recommend the following steps for performance test automation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Take a look at the following external ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/code-with-engineering-playbook/automated-testing/performance-testing/",children:"guide"})," from Microsoft Engineering Fundamentals for more information about applying performance testing."]}),"\n",(0,i.jsxs)(n.li,{children:["Refer to the ",(0,i.jsx)(n.a,{href:"testing-frameworks#for-performance-testing",children:"Testing Frameworks"})," page for performance test tools and frameworks."]}),"\n",(0,i.jsx)(n.li,{children:"Integrate performance tests into your Continuous Integration and Continuous Delivery (CI/CD) pipeline to enable regular and automated execution of performance tests as part of the software delivery process."}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"example-user-interface-test-automation",children:"Example: User Interface Test Automation"}),"\n",(0,i.jsx)(n.p,{children:"We recommend the following steps for user interface test automation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Take a look at the following external ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/code-with-engineering-playbook/automated-testing/ui-testing/",children:"guide"})," from Microsoft Engineering Fundamentals for more information about applying user interface testing."]}),"\n",(0,i.jsxs)(n.li,{children:["Refer to the ",(0,i.jsx)(n.a,{href:"testing-frameworks#for-user-interfaces-uis",children:"Testing Frameworks"})," page for user interface test tools and frameworks."]}),"\n",(0,i.jsx)(n.li,{children:"Set up a CI pipeline to automatically trigger UI test execution upon code changes or at scheduled intervals."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-maintain-your-tests",children:"4. Maintain Your Tests"}),"\n",(0,i.jsx)(n.p,{children:"Your tests should be updated, at minimum, upon the following events:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Whenever ",(0,i.jsx)(n.strong,{children:"code changes"})," occur (e.g., new features, bug fixes, refactoring), revisit related tests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Upgrading libraries, frameworks, or testing tools"})," may necessitate adjustments to existing tests."]}),"\n",(0,i.jsxs)(n.li,{children:["As your ",(0,i.jsx)(n.strong,{children:"application data evolves"}),", ensure test data remains relevant."]}),"\n",(0,i.jsxs)(n.li,{children:["Periodic ",(0,i.jsx)(n.a,{href:"testing-frameworks",children:"code coverage"})," analysis identifies ",(0,i.jsx)(n.strong,{children:"underused or obsolete tests"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This is the list of items to be maintained:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"pathname:///assets/software-lifecycle/continuous-testing/TESTING.md",children:"TESTING.md"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#32-component-test-automation",children:"Component tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#33-system-test-automation",children:"System tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#3-automate-your-tests",children:"Test automation"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"frequently-asked-questions-faq",children:"Frequently Asked Questions (FAQ)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: How does continuous testing address usability and user interface testing?"})}),"\n",(0,i.jsx)(n.p,{children:"A: We acknowledge the importance of usability and UI testing and are actively exploring ways to integrate them seamlessly into our continuous testing model."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: Is it necessary to implement all recommended tools, considering resource constraints?"})}),"\n",(0,i.jsx)(n.p,{children:"A: We understand the challenges, and thus, we're developing a common subset of tools for all projects, prioritizing their importance for more feasible implementation."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: Are certain projects not mature enough for specific tools?"})}),"\n",(0,i.jsx)(n.p,{children:"A: Yes, we recognize project maturity levels vary. We recommend waiting until your project reaches an appropriate stage, especially for tools like integration testing."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: What phases are prioritized in the continuous testing guidelines?"})}),"\n",(0,i.jsx)(n.p,{children:"A: Security, verification and validation, and integration testing are considered essential phases and will be prioritized in our guidelines."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: How does licensing factor into the tool selection process, even for open-source tools?"})}),"\n",(0,i.jsx)(n.p,{children:"A: Licensing is crucial, and we are actively exploring strategies to address licensing concerns, ensuring compliance even with open-source tools."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: Is continuous testing a one-time implementation, or can it be an iterative process?"})}),"\n",(0,i.jsx)(n.p,{children:"A: We emphasize iterative implementation for continuous testing success, understanding that refining the process takes time."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"credits",children:"Credits"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Authorship"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/yunks128",children:"Kyongsik Yun"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/riverma",children:"Rishi Verma"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acknowledgements"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We are grateful to John Engelke and Dillon Dalton for their insightful comments and feedback, which have greatly improved this work."}),"\n",(0,i.jsx)(n.li,{children:"We also appreciate Drew Meyers and Luca Cinquini for providing exemplary best practices for various tests and pre-commit hooks."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"feedback-and-contributions",children:"Feedback and Contributions"}),"\n",(0,i.jsxs)(n.p,{children:["We welcome feedback and contributions to help improve and grow this page. Please see our ",(0,i.jsx)(n.a,{href:"https://nasa-ammos.github.io/slim/docs/contribute/contributing/",children:"contribution guidelines"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);