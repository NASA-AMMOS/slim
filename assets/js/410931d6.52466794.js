"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6025],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5781:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"Continuous Delivery",description:"A streamlined guide to setting up a robust continuous delivery pipeline, automating releases, and maintaining best practices."},o="Continuous Delivery",l={unversionedId:"guides/software-lifecycle/continuous-delivery/readme",id:"guides/software-lifecycle/continuous-delivery/readme",title:"Continuous Delivery",description:"A streamlined guide to setting up a robust continuous delivery pipeline, automating releases, and maintaining best practices.",source:"@site/docs/guides/software-lifecycle/continuous-delivery/readme.md",sourceDirName:"guides/software-lifecycle/continuous-delivery",slug:"/guides/software-lifecycle/continuous-delivery/",permalink:"/slim/docs/guides/software-lifecycle/continuous-delivery/",draft:!1,editUrl:"https://github.com/nasa-ammos/slim/tree/main/docs/guides/software-lifecycle/continuous-delivery/readme.md",tags:[],version:"current",frontMatter:{title:"Continuous Delivery",description:"A streamlined guide to setting up a robust continuous delivery pipeline, automating releases, and maintaining best practices."},sidebar:"guidesSidebar",previous:{title:"Secrets Detection",permalink:"/slim/docs/guides/software-lifecycle/security/secrets-detection/"},next:{title:"Continuous Integration",permalink:"/slim/docs/guides/software-lifecycle/continuous-integration/"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Background",id:"background",level:3},{value:"Approach",id:"approach",level:3},{value:"Key Use Cases",id:"key-use-cases",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Select Package Repositories",id:"1-select-package-repositories",level:3},{value:"1.1 Code Packages",id:"11-code-packages",level:4},{value:"Python Packages",id:"python-packages",level:5},{value:"Java Packages",id:"java-packages",level:5},{value:"NodeJS Packages",id:"nodejs-packages",level:5},{value:"1.2 Container Images",id:"12-container-images",level:4},{value:"Public Containers",id:"public-containers",level:5},{value:"Private Containers",id:"private-containers",level:5},{value:"1.3 Test Data",id:"13-test-data",level:4},{value:"Small Datasets (&lt;2GB)",id:"small-datasets-2gb",level:5},{value:"Medium Datasets (2GB-100GB)",id:"medium-datasets-2gb-100gb",level:5},{value:"Large Datasets (&gt;100GB)",id:"large-datasets-100gb",level:5},{value:"2. Implement Naming Conventions",id:"2-implement-naming-conventions",level:3},{value:"2.1 Package Naming",id:"21-package-naming",level:4},{value:"2.2 Version Naming",id:"22-version-naming",level:4},{value:"3. Automate Publishing",id:"3-automate-publishing",level:3},{value:"3.1 GitHub Actions Workflow",id:"31-github-actions-workflow",level:4},{value:"3.2 Automated Testing Integration",id:"32-automated-testing-integration",level:4},{value:"4. Maintain Delivery Pipeline",id:"4-maintain-delivery-pipeline",level:3},{value:"5. GitHub Actions Workflow Example for PyPI Project Continuous Delivery",id:"5-github-actions-workflow-example-for-pypi-project-continuous-delivery",level:3},{value:"Frequently Asked Questions (FAQ)",id:"frequently-asked-questions-faq",level:2},{value:"Credits",id:"credits",level:2},{value:"Feedback and Contributions",id:"feedback-and-contributions",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"continuous-delivery"},"Continuous Delivery"),(0,i.kt)("pre",{align:"center"},"A streamlined guide to setting up a robust continuous delivery pipeline, automating releases, and maintaining best practices."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("h3",{id:"background"},"Background"),(0,i.kt)("p",null,"Continuous Delivery (CD) is the practice of automatically preparing code changes for production release, extending Continuous Integration (CI) to ensure that every validated change is always production-ready. This guide presents a simplified, practical approach to implementing CD through standardized repository selections, naming conventions, and automation."),(0,i.kt)("h3",{id:"approach"},"Approach"),(0,i.kt)("p",null,"Adopt a clear, four-step plan to implement Continuous Delivery effectively:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Choose repositories"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Adopt standardized naming conventions"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Automate publishing"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Maintain the delivery pipeline"),".")),(0,i.kt)("mermaid",{value:"graph TD\n    Repository[Choose Repositories] --\x3e Naming[Adopt Naming <br/>Conventions] --\x3e Automate[Automate Publishing]\n    Automate --\x3e Maintain[Maintain Pipeline]\n    Maintain --\x3e Repository"}),(0,i.kt)("h3",{id:"key-use-cases"},"Key Use Cases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Auto-publishing built artifacts to package managers."),(0,i.kt)("li",{parentName:"ul"},"Standardizing naming conventions across repositories."),(0,i.kt)("li",{parentName:"ul"},"Versioning releases using semantic versioning."),(0,i.kt)("li",{parentName:"ul"},"Distributing test data automatically."),(0,i.kt)("li",{parentName:"ul"},"Automating container image publication."),(0,i.kt)("li",{parentName:"ul"},"Enabling infrastructure-as-code deployment.")),(0,i.kt)("h2",{id:"quick-start"},"Quick Start"),(0,i.kt)("p",null,"The most important step in setting up continuous delivery is choosing the right repositories and implementing proper naming conventions."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Key Concepts to Get Started:")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#package-repositories"},"\u2b07\ufe0f Choose a Package Repository"))," based on your artifact type:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PyPI for Python packages"),(0,i.kt)("li",{parentName:"ul"},"Maven Central for Java"),(0,i.kt)("li",{parentName:"ul"},"NPM Registry for NodeJS"),(0,i.kt)("li",{parentName:"ul"},"ECR (Amazon Elastic Container Registry)/DockerHub for Containers")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83d\udcdd Implement ",(0,i.kt)("a",{parentName:"strong",href:"#naming-conventions"},"Standardized Naming Conventions"),":")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nasa-[project-org]-[module-name]")," for Python"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gov.nasa.[project-org].[module-name]")," for Java"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@nasa-[project-org]/[module-name]")," for NodeJS")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83d\ude80 Set up ",(0,i.kt)("a",{parentName:"strong",href:"#automated-publishing"},"Automated Publishing"))," using GitHub Actions"),(0,i.kt)("h2",{id:"step-by-step-guide"},"Step-by-Step Guide"),(0,i.kt)("h3",{id:"1-select-package-repositories"},"1. Select Package Repositories"),(0,i.kt)("p",null,"Choose appropriate repositories based on your artifact type:"),(0,i.kt)("h4",{id:"11-code-packages"},"1.1 Code Packages"),(0,i.kt)("h5",{id:"python-packages"},"Python Packages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": PyPI"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Size Limit"),": 60MB"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cost"),": Free"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Python libraries and tools"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Setup Steps"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create account on PyPI"),(0,i.kt)("li",{parentName:"ol"},"Set up project with ",(0,i.kt)("inlineCode",{parentName:"li"},"setup.py")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"pyproject.toml")),(0,i.kt)("li",{parentName:"ol"},"Configure automated publishing")))),(0,i.kt)("h5",{id:"java-packages"},"Java Packages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": Maven Central"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Size Limit"),": No specific limit"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cost"),": Free"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Java libraries and frameworks"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Setup Steps"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create Sonatype account"),(0,i.kt)("li",{parentName:"ol"},"Configure Maven settings"),(0,i.kt)("li",{parentName:"ol"},"Set up GPG signing")))),(0,i.kt)("h5",{id:"nodejs-packages"},"NodeJS Packages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": NPM Registry"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Size Limit"),": No specific limit"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cost"),": Free"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": JavaScript/TypeScript packages"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Setup Steps"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create NPM account"),(0,i.kt)("li",{parentName:"ol"},"Configure package.json"),(0,i.kt)("li",{parentName:"ol"},"Set up automated publishing")))),(0,i.kt)("h4",{id:"12-container-images"},"1.2 Container Images"),(0,i.kt)("h5",{id:"public-containers"},"Public Containers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": GitHub Packages/GitLab Registry"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Open source projects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Limitations"),": Higher latency for runtime")),(0,i.kt)("h5",{id:"private-containers"},"Private Containers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": Amazon ECR"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Production deployments"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Features"),": Low-latency pulls, private repos")),(0,i.kt)("h4",{id:"13-test-data"},"1.3 Test Data"),(0,i.kt)("h5",{id:"small-datasets-2gb"},"Small Datasets (<2GB)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": GitHub/GitLab Releases"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Naming"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"[project-org]-[project-module]-test-dataset")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Unit test data, small samples")),(0,i.kt)("h5",{id:"medium-datasets-2gb-100gb"},"Medium Datasets (2GB-100GB)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": Amazon S3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Features"),": Pre-signed URLs, bandwidth control"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Integration test data")),(0,i.kt)("h5",{id:"large-datasets-100gb"},"Large Datasets (>100GB)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Repository"),": EOSDIS DAAC (Earth data) or PDS (Planetary data)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Best For"),": Mission data, large-scale testing")),(0,i.kt)("h3",{id:"2-implement-naming-conventions"},"2. Implement Naming Conventions"),(0,i.kt)("h4",{id:"21-package-naming"},"2.1 Package Naming"),(0,i.kt)("p",null,"Follow standard naming conventions for each repository type:"),(0,i.kt)("mermaid",{value:"graph TD\n    A[Package Type] --\x3e B{Language?}\n    B --\x3e|Python| C[nasa-project-module]\n    B --\x3e|Java| D[gov.nasa.project.module]\n    B --\x3e|NodeJS| E[_at_nasa-project/module]"}),(0,i.kt)("h4",{id:"22-version-naming"},"2.2 Version Naming"),(0,i.kt)("p",null,"Use semantic versioning (MAJOR.MINOR.PATCH):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MAJOR: Breaking changes"),(0,i.kt)("li",{parentName:"ul"},"MINOR: New features, backward compatible"),(0,i.kt)("li",{parentName:"ul"},"PATCH: Bug fixes")),(0,i.kt)("h3",{id:"3-automate-publishing"},"3. Automate Publishing"),(0,i.kt)("h4",{id:"31-github-actions-workflow"},"3.1 GitHub Actions Workflow"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Publish Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up environment\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.x'\n      - name: Build and publish\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: |\n          python -m pip install build twine\n          python -m build\n          python -m twine upload dist/*\n")),(0,i.kt)("h4",{id:"32-automated-testing-integration"},"3.2 Automated Testing Integration"),(0,i.kt)("mermaid",{value:"graph TD\n    A[Code Change] --\x3e B[Run Tests]\n    B --\x3e C{Tests Pass?}\n    C --\x3e|Yes| D[Build Artifact]\n    C --\x3e|No| E[Fix Issues]\n    D --\x3e F[Publish to Repository]"}),(0,i.kt)("h3",{id:"4-maintain-delivery-pipeline"},"4. Maintain Delivery Pipeline"),(0,i.kt)("p",null,"Regular maintenance tasks:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Update repository credentials"),(0,i.kt)("li",{parentName:"ol"},"Monitor publishing success rates"),(0,i.kt)("li",{parentName:"ol"},"Verify artifact integrity"),(0,i.kt)("li",{parentName:"ol"},"Review and update workflows"),(0,i.kt)("li",{parentName:"ol"},"Clean up old artifacts")),(0,i.kt)("h3",{id:"5-github-actions-workflow-example-for-pypi-project-continuous-delivery"},"5. GitHub Actions Workflow Example for PyPI Project Continuous Delivery"),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},".github/workflows/pypi-cd.yml")," file in your GitHub repository with the following ",(0,i.kt)("a",{target:"_blank",href:n(7712).Z},"content"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Continuous Delivery for PyPI Project\n\non:\n  push:\n    branches:\n      - main  # Trigger on push to the 'main' branch\n    tags:\n      - 'v*.*.*'  # Trigger on tags matching semantic versioning (v1.0.0)\n\njobs:\n  # Job to set up the environment, install dependencies, and publish to PyPI\n  publish-to-pypi:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'  # Use a specific Python version, e.g., '3.8', '3.9', etc.\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install build twine  # Required for building and publishing to PyPI\n\n    - name: Build the package\n      run: |\n        python -m build  # This creates the distribution files under the 'dist' directory\n\n    - name: Publish package to PyPI\n      env:\n        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}  # Store PyPI credentials as GitHub secrets\n        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n      run: |\n        python -m twine upload dist/*  # Uploads the package to PyPI\n")),(0,i.kt)("h2",{id:"frequently-asked-questions-faq"},"Frequently Asked Questions (FAQ)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: How do I handle dependencies between packages?")),(0,i.kt)("p",null,"A: Use semantic versioning and dependency ranges to manage package relationships."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: What about handling sensitive data in artifacts?")),(0,i.kt)("p",null,"A: Use private repositories and encrypted secrets in CI/CD pipelines."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: How often should artifacts be published?")),(0,i.kt)("p",null,"A: Publish on every tagged release for stable versions, and optionally for development versions."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Q: How to manage large binary artifacts?")),(0,i.kt)("p",null,"A: Use specialized repositories like Amazon S3 for large artifacts and reference them in package metadata."),(0,i.kt)("h2",{id:"credits"},"Credits"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Authorship"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yunks128"},"Kyongsik Yun"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Acknowledgements"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Thanks to the SLIM team for providing guidance")),(0,i.kt)("h2",{id:"feedback-and-contributions"},"Feedback and Contributions"),(0,i.kt)("p",null,"We welcome feedback and contributions to help improve and grow this page. Please see our ",(0,i.kt)("a",{parentName:"p",href:"https://nasa-ammos.github.io/slim/docs/contribute/contributing/"},"contribution guidelines"),"."))}m.isMDXComponent=!0},7712:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/pypi-cd-template-cac7a7a0d3f5806ee6451c68d396f70d.yml"}}]);