[[{"l":"SLIM","p":["A shared resource for discussing, iterating and referencing best practices in software lifecycle process improvements for multi-mission space and ground software","\uD83D\uDCD6 View our Infographic (PDF)","Software Lifecycle Improvement & Modernization (SLIM) is a project focused on collecting, developing, and disseminating best practices and process improvement strategies in NASA multi-mission software development lifecycle ecosystems. SLIM represents both a community of contributors as well as a continually evolving repository for best practices documentation."]},{"l":"Scope","p":["There are three key areas within the software development lifecycle improvement space that SLIM focuses on providing best practice guidance for:","SLIM-scope"]},{"l":"Process","p":["We reach out to community member projects, and solicit input on outstanding process improvement needs, including the respective needs' relative ranking in importance / criticality. A few needs are chosen to focus active contributor time upon - seeking to develop best practice guides, including items such as use case lists, trade-studies, reference architectures and starter kits.","SLIM-community-process","Once prioritized needs are identified, contributors go through a series of steps to create best practice guides for the community.","SLIM-dev-process","More information on our development process for best practice guides can be found in our Contributing Guide."]},{"l":"Community Members","p":["What does it mean to be a community member of SLIM? The following ideas apply to member projects:","Has a representative (a point-of-contact) who interfaces with the SLIM effort","Active and timely feedback on SLIM issue ticket prioritization","Openness and willingness to infuse SLIM best practices","The following list of projects are currently SLIM member projects:","NASA Ammos","Unity SDS","HySDS"]},{"l":"Best Practice Guides","p":["The following sections link to best practices resources developed by SLIM for process improvement needs solicited by the wider SLIM community.","The list is sorted alphabetically and is continually being added to."]},{"l":"Continuous Integration","p":["Our continuous integration best practice guide focuses on techniques to support software build integration, the publishing of build results and the releasing software assets.","\uD83D\uDCD6 Read the Guide"]},{"l":"Continuous Testing","p":["Our continuous testing best practice guide focuses on exploring scenarios for automatically invoking unit, regression and integration tests, as well as the eco-system of tools and best practices to support creating the tests.","\uD83D\uDCD6 Read the Guide"]},{"l":"Documentation","p":["Our documentation best practice guide focuses on solutions for building, editing, leveraging templates for, hosting, and maintaining documentation for your projects.","\uD83D\uDCD6 Read the Guide"]},{"l":"Get Involved","p":["SLIM best practice guides and recommendations are open source, which means you have the freedom to use our work (in accordance with our LICENSE) as well as contribute and help shape our future work. We're excited to welcome new contributors and users.","Some ways you can get involved with SLIM:"]},{"l":"Use Our Guides","p":["The fastest way to start using SLIM process improvement solutions is to take a look at our best practice guides, specifically our starter kits. Starter kits provide plug-and-play solutions to process improvement needs. To complement our starter kits, take a look at use cases to understand the context of the starter kit solutions, trade studies to understand tool / solution trade-offs, and reference architectures to understand how tool / solutions interact in an actual working environment.","We recommend creating pull-requests using our starter kits against your own repositories. Reach out to our contributor communication channels for questions if you're unsure how to create pull requests. An excellent tool to automate the infusion of starter kits in your repositories (especially if you have many) is to use a tool like multi-gitter if you're using Git to create pull-requests.","Finally, if you use any of our guides - please consider adding the following badge to your README.md: SLIM"]},{"l":"Contribute to Our Guides","p":["We're excited to see your contribution! Please see our Contributing Guide on details for how to contribute. We accept many non-code contributions as well, so feel free to think creatively."]},{"l":"Spread the Word","p":["The more people & projects using, contributing, and maintaining SLIM, the more robust and long-term this effort will last.","You can help by:"]},{"l":"Socializing on GitHub","p":["‚≠ê Star our Repo","\uD83D\uDC40 Watch our Repo","\uD83D\uDE00 Discuss our Repo"]},{"l":"Website","p":["Share our website ( https://nasa-ammos.github.io/slim) with your friends and colleagues"]}],[{"l":"Continuous Integration Guide","p":["This this guide, we explore best practices for continuous integration - including exploring scenarios for build integration, publishing test results and releasing compiled software."]},{"l":"Use Cases","p":["In this section, we provide information about potentially useful use cases for continuous integration. The key idea is to provide some more nuanced context for the use cases such that technology (tool) solutions can be shared in context.","See list of use cases"]},{"l":"Trade Studies","p":["Here we provide a table of trade offs, feature comparisons, and metrics for a given set of reference architectures mapped to use case tool solutions. Choice of comparison points are solicited directly from community member feedback.","See list of trade studies"]},{"l":"Reference Architectures","p":["In this section, we provide reference architectures that map to select use case scenarios from the above section. The key idea is to provide an architecture / flowchart that simplifies the understanding of how a particular class of tools to satisfy a use case could be put together to help with continuous integration needs.","See list of reference architectures"]},{"l":"Starter Kits","p":["In this section, we provide code and configuration for encoding select reference architectures, with select tools chosen from trade studies, through to automation. The key idea for starter kits is to work with folks in the SLIM community to create template solutions that can be easily modified and deployed to enact a process improvement change. These solutions should serve to both provide example implementations and concrete references for getting started.","See list of starter kits"]}],[{"l":"Use Cases","p":["For all use cases below, we provide two resources:","Visual mind-map. Read this diagram left-to-right as an English language statement. The parent nodes represent components of a use case, and the leaf nodes (far right) represent tool solutions we think are appropirate for the use case. This file is rendered using https://markmap.js.org.","Markdown. This file has a one-to-one correspondance to the visual mind-map. Feel free to propose changes by submitting a pull request for this Markdown file on our GitHub. See contribution guide for details."]},{"l":"All Use Cases","p":["Preview of mind-map:","Versions:","Full Visualization Markdown"]}],[{"l":"Trade Studies","p":["Nothing here yet, come back soon..."]}],[{"l":"Reference Architectures"},{"l":"Overview","p":["Architectures presented here provides a high-level reference guide for the implementation of continuous integration best practices. They describe the structure, component interrelationship and processes invoked without detailing any specific implementation. Please see categories and links below for details."]},{"l":"Continuous Integration","p":["Continuous integration (CI) is an automated process triggered by development changes to perform an end-to-end validation and presentation of software. There are a number of different steps whose goal is to ensure code works together, tests successfully and releases readily. CI is implemented as a development pipeline that automates steps normally undertaken in a release process."]},{"l":"Background","p":["Routine merging of components into a functional software product and publishing compiled binaries is the core of CI. It demands code be committed collaboratively and requires products from different development systems to work together. It tests software builds through a predictable process of known touchpoints that identify specific areas of interoperability and breakage. Compilation results are shared in a centralized system of logging and reporting. These approaches promote many software development best practices, but in particular reduce risk:","Single Source of Truth: All components and configurations must be bundled to prove compiles function, easing deployment of compiled binaries.","Fail Fast/Fix Fast: Know the limitations of compiled integrations and receive immediate notifications about failures.","Visibility/Open Success: The state of the product is reported constantly on CI services.","Testing Availability: Automation allows repeatable deployment to test servers, elevating functional testing on par with release."]},{"i":"pipeline-a-series-of-systems-executing-builds","l":"Pipeline: A series of systems executing builds","p":["A CI pipeline is a series of automated processes, systems and triggers that execute in order to push software from raw code to a compiled product that may be deployed.","The CI pipeline is composed of several systems linked together through a series of automation triggers:","Development System The sum of code commits and code versioning systems, such as Git, comprised of systems that manage raw code. Hosted implementations, such as GitHub, provide limited facilities to validate commits.","Continuous Integration System A collection of services that interact dynamically to perform such tasks as compilation, testing, reporting and/or archiving build artifacts. CI services, such as Jenkins or Travis CI, serve as management node for CI operations.","Continuous Deployment System Tooling and services, such as Ansible or Puppet, that deploy published software into one or more venues for extended testing or delivery. Often, software outputs from the CI pipeline are deployed to development systems for extended user testing."]},{"l":"A CI Pipeline is composed of discrete process steps","p":["The compile-release-publish workflow is broken down to a series of discrete process steps that describe specific operations, ranging from commit processing to publishing compiled binaries. These discrete process steps are reported in logs and reports, helping identify specific points during processing and build failures. Process steps are associated with specific systems in the pipeline based on its role, so the Development System may focus on tracking code merging and commit history, for instance."]},{"l":"Development System","p":["Commit Code management, including developer commits, merging and history, are tracked in this step. A commit triggers notifications to subsequent steps and systems to kick off the CI pipeline.","Validate(optional) Self-contained processing may take place to validate commit content in advance of triggering notifications to subsequent steps and systems. These may include facilities, similar to Github Actions, that can be leveraged to validate files, amongst other tasks."]},{"l":"Continuous Integration System","p":["Compile(core) Core software packages are compiled and the capacity to compile is validated, resulting in unpackaged binaries. Failures at this step indicate a problem in code, code merges or tooling.","Test At the core of CI is testing. The process is inherently checking for successful compilation and execution, and optionally validating software with unit, integration and other tests. Successful Execution: Builds are inherently validated to ensure compilations complete successfully, and other processes germane to the build complete. Errors or failures result in build failure where the compile-release-publish process is halted. Software Testing:(optional, desirable) Test software packages are compiled and the capacity to compile tests is validated, also. The test step will execute the compiled tests against core software packages to run unit and other types of functional tests on every build. Builds will proceed if no tests are implemented, however, test validation is material to the CI philosophy.","Report At the core of CI is reporting, both notifications and functional reporting. Notifications: Developers are notified on successful completion of builds or failures. These notifications support a number of electronic media, such as email, RSS feed and chat messaging in commonly used applications, such as Slack. Other notifications may trigger subsequent automation steps and systems through technologies such as RESTful Web service messaging or simple HTTP requests. Think of notifying a Kubernetes service to start deployment to a cloud computing platform. Functional Reporting:(compile status, test results) Reports are a built-in feature in many CI systems, but extended reports can be generated also to track such items as test results locally or in connected systems. The Jenkins build server, for instance, maintains build logs that tie commit history and compile results to every single execution. Similarly, results from tests can be reported using extended tooling to servers such as Gurock TestRail to retain test runs from every build. Build logs typically span all aspects of the compile-release-publish workflow, from code checkout to publishing compiled binaries.","Package The result of code compilation must be deliverable as manageable objects, and that is the purpose of the packaging phase. One or more compiled binaries may exist, as well as a set of properties or other application-required configurations. These are bundled into one or more collections typically compressed using one of a number of common formats, such as ZIP, JAR or TAR. In practice many build frameworks, such as Apache Maven, package automatically. This step allows the CI system to bundle, protect and lock down files for distribution and reproducibility.","Publish The results of the compile-release-publish process are packaged binaries. These are shared with development and devops communities by publishing the files to one or more artifact repositories, such as JFrog Artifactory. Packaged binaries are versioned, checksummed and do not change after release -- core features of reliable and reproducible CI software delivery."]},{"l":"Continuous Deployment System","p":["Orchestrate(optional) The orchestration process downloads files and prepares target servers to launch. It moves compiled binaries and properties into place and configures required services on destination systems. Depending on complexity of the final product this step is optional.","Release(optional) In CI implementations releasing product typically starts and announces applications on a development server used for extended functionality testing. An extension of this, Continuous Delivery (CD), automates functionality testing and deploys to multiple release runway destinations, including potentially directly to production. Releasing compiled product is optional depending on intended use cases (executable vs. API library) or whether further testing is desired."]},{"l":"Actors and Automation","p":["A more robust view of CI architecture describes the participants, both users and automated systems. The CI process always starts with developers who commit code, and it finishes with reliable, unchanging, versioned and packaged software delivered by an automated system."]},{"i":"note-physical-servers-are-numbered-in-the-above-diagram","l":"NOTE: Physical servers are numbered in the above diagram."},{"l":"Participant Touchpoints","p":["The actors in the CI process are code maintainers and end users. The automation takes place in servers or services between these actors. A more detailed understanding of the process itemizes the roles and responsibilities of each participant. This graph interleaves services with users and processes to explain process flow.","\uD83D\uDC69‚Äç\uD83D\uDCBB [Action: Push] Developers, or code maintainers, (\"Dev 1...n\") start the build process by committing and pushing code to a remote version control server (VCS), such as Git. This may be anything from a minor property change to new code, but in all cases the expectation is that code from one maintainers' workstation should execute identically and reliably on others.","1\uD83D\uDDA5 [Start-- Action: Trigger, Content Validation] The VCS server reports when new code is delivered (commit) and performs content validation on that code. Content validation can range from verifying format of data in the commit to checking for specific content in files. On code acceptance and validation, a network request triggers to notify successive machines to continue processing.","2\uD83D\uDDA5 [Service-- Action: Validate, Publish, Deploy (opt.), Report] The Continuous Integration Server(CI Server) provides a platform to execute various steps in the CI process. It's the core that handles both decision making and mechanics of compilation, testing and packaging. A unified interface provides a centralized location to view progress and success of application builds. The CI Server makes decisions on whether to proceed when code compiles and examines test results to verify test passes. It typically retains detailed logs of processes and test results that are made available through a user interface for on-demand viewing. Notifications are provided through both the user interface and other media, such as email. Additionally, the CI Server provides the platform that executes post-build steps, including publishing packaged artifacts or deploying those artifacts to servers for user consumption. This is all accomplished using built-in tooling or compatible scripting.","3\uD83D\uDDA5 [Endpoint] The Artifact Repository is a dedicated software library for storing various build products (\"artifacts\") that is available on demand to developers, users and implementers. On successful builds the CI server publishes packaged artifacts to the repository to make them available broadly.","4\uD83D\uDDA5 [Endpoint] The Application Server provides an execution environment with the final software package deployed in a runtime environment for extended use testing. Depending on the type of software project -- whether it's an API library, server application or executable -- deployment optionally provides a platform to demonstrate the product. Automated testing can be further leveraged to verify that an application performs as designed. Some CI processes extend the concept of automated deployment through a series of server destinations along a release runway. \"Continuous Deployment (CD)\" extends the CI process to automatically deploy packaged software in a production environment.","5\uD83D\uDDA5 [Service-- Notification and Reporting Services] Notify and Reporting Services assume different forms to provide real-time information on build status. These are typically handled within the CI Server in the case of build failure emails. Build logs are published to the CI Server user interface for on-demand inspection. However, reporting in a CI process may also take the form of automated ticket creation in issue tracking software, such as Atlassian Jira or test case reporting in test management software, such as Gurock TestRail. Notification is highly customizable in the CI server and in most cases leverages built-in server features.","\uD83D\uDC65 [End-- Action: Usage] The target audience is, of course, the User Community(\"User 1...n\"), which is comprised of a number of participants from developers to application users. Primarily, the CI process delivers packaged binaries available for download, usage or integration from the Artifact Repository. These may be executed directly or used as dependencies in other code. A running version of the application may also be provided with an automated deployment to an Application Server. However, generally, users benefit prodigiously from logs, notifications and other information that provide invaluable insight and transparency to otherwise detailed and intricate build systems producing modern software.","Ultimately, the CI process benefits all users with a predictable, controlled and automated mechanism to produce reliable software that is transparent and self-validating. This lends itself to tested, reproducible software deliveries with the crisp reliability and speed of automated systems."]}],[{"l":"Starter Kits","p":["This page contains starter kit information, which represent templates, code and configuration to help you get started quickly with continuous integration (CI) best practices described in this overall guide. Please see categories and links below for details."]},{"i":"build-release-and-publish-automation","l":"Build, Release and Publish Automation","p":["This section contains links to sample actions, templates and configurations that demonstrate CI systems in practice on various platforms using different development languages."]},{"l":"Python Starter Kit","p":["A complete, deployment-ready Python 3 application that's bundled into a reusable template repository for quick implementation."]},{"i":"integrated-build-release-and-publish-on-github","l":"Integrated Build, Release and Publish on GitHub","p":["Add the local module import of version_tooling to your Python 3 top-level file or entry-point script.","Alert Unique development configurations may adversely impact testing on local workstations. Testing should be conducted with a supported python.org release or virtual container as used on GitHub. 7. Build locally to test the configuration The application will build, install and deploy from a local command line when all configurations are properly set.","Build automation using GitHub, Docker, GitHub Actions and PyPi","Change the python-publish.yml configuration to remove Test PyPi coordinates","Clean and build and clean again after module builds successfully","Cloning and manually editing our starter kit repository.","Compile, tag and release, and publish to the Python Package Index (PyPi)","Consider organizing code into smaller, encapsulated component files that may be imported from the api directory.","Copy the value and retain this PyPi token to use later.","Copy the value and retain this Test PyPi token to use in GitHub Secrets.","Copy versioning system files ( version.py and version_tooling.py) from the slim_sample_project that support build tooling.","Create a new repository by one of the following methods:","Creating a new repository using our repository template(GitHub only); or","Discuss with your development team continuous integration best practices and seek consensus on a workflow to build, publish and release software.","Don't remove versioning system files ( version.py and version_tooling.py) that support build tooling.","Edit the metadata keywords to set appropriate keyword values to apply to your project.","Edit the write_to variable to point to the directory containing your Python 3 code.","Existing code? Move the directory containing your Python 3 code into the new project and rename it to match your unique module name.","GitHub Secrets(use the Test PyPi token here initially) in your newly created repository","If your module launches from a command-line, define an executable inside your module: executable-name = my_package.module:function.","In the repository, select the Settings tab and navigate to Security: Secrets and variables--> Actions and press the button New repository secret.","In the repository, select the Settings tab and navigate to Security: Secrets and variables--> Actions.","Information To validate the module, we test on the Test PyPi sandbox by default. Then, to release on the official PyPi, a minor configuration change is required. All previous steps must be complete. 8. Build on GitHub A release kicks off a build and release process in GitHub Actions.","Install local tooling and requirements","Kick off a build by releasing your product using the same version.","Modern PEP 517/ 518 compliant tooling using declarative TOML-based configurations inside a pyproject.toml file.","Modify console_scripts to point at your entry-point:","Name your secret PYPI_API_TOKEN and paste the value from Test PyPi. (Later, this value will be replaced with the actual PyPi token to enable public release.)","Navigate to Account Settings-> API tokens and press the button Add API Token. Name your token PYPI_API_TOKEN and generate it.","New project? Rename the existing slim_sample_project directory to your unique module name. Rename hello_world.py to reflect your application and start developing.","PyPi website","Recalling the PyPi token previously saved in step 3(ii): In Repository secrets, edit the PYPI_API_TOKEN and paste the saved PyPi token value to update it.","Release to PyPi (simple configuration changes point at the release server)","Remove '--repository testpypi' from the one-line publish command to read: twine upload --verbose dist/*.whl dist/*.zip","Replace NASA-AMMOS/slim-starterkit-python with the project/repo_name for your cloned project.","Requirement‚Ä¢ Sandbox strategy: Two separate accounts must be created on (1) Test PyPi and (2) PyPi. We'll name values identically and switch them later when everything works.‚Ä¢ Admin rights are necessary to set up GitHub Secrets. 3. Setup account credentials:","Set name to match your unique module name.","Set the value as empty if there is no entry-point.","Shortcut Already skilled with Python Setuptools build system? You may selectively apply files from the starter kit to your own project using details below. 4. Choose a unique name for your Python 3 module. The name shouldn't duplicate any of the currently published modules in PyPi. 5. Move code into place","Shortcut Lines requiring code updates are commented with the keyword MODIFY. Documentation requiring updates are marked with the keyword INSERT. 6. Apply project settings and customizations","SLIM Starterkit Python","Starter Kit:","Suggested updates for CODE_OF_CONDUCT.md, CONTRIBUTING.md and README.md are marked by the keyword INSERT and explained in detail within markdown.","Test publication on Test PyPi","Test PyPi website","This product demonstrates a GitHub-based strategy of end-to-end CI automation using modern Python tooling to demonstrate publishing on release.","To leverage this template, make sure to do the following:","Update author, author_email, description and keywords to reflect your project details","Update documentation to reflect details about your new project","Update PYPI_API_TOKEN to point at PyPi in GitHub Secrets in your newly created repository","Update pyproject.toml to update build system dependencies","Update setup.cfg to specify build system configurations","Update the version number in the version.py file.","Update URLs for your project.","When the product builds successfully, proceed to step ii. Otherwise, revisit earlier steps and check for errors or other invalid settings.","You'll have to keep the local module import of version_tooling to take advantage of build version automation."]},{"l":"Deliverables","p":["This starter kit produces several deliverables deployed for distribution:","GitHub","Release report with automatic changelog summaries based on commit history.","Tagged build versions corresponding to release versions.","Source distribution:","Tarball","ZIP","PyPi","Fully documented site with project links","Source distribution (with release hashes):","Built Python 3 distribution:","Python wheel"]},{"l":"Patch Integrity","p":["This section contains links to sample actions, templates, and configuration for ensuring the basic integrity of patches."]},{"l":"GitHub Actions"},{"i":"developer-certificate-of-origin-dco","l":"Developer Certificate of Origin (DCO)","p":["This GitHub Action provides an automated check for ensuring developers have a \"signed-off\" commit when contributing to a given GitHub repository.","Starter Kit:","GitHub App to install onto your GitHub repo","To leverage this template, make sure to do the following:","Talk with your team about leveraging this GitHub action, and seek wide agreement before you adopt","Log into GitHub.com","Click the above GitHub App starter kit link","Click \"Install\" in the top-right hand corner of the page","Follow the prompts to select the organizations and repositories you'd like to install this app","Verify the installation by navigating to your given repository's \"Settings\" page, and confirming the app appears in the \"Integrations -> Applications\" left-hand menu"]},{"l":"Git Hooks"},{"l":"git-secrets","p":["This tool helps prevent unauthorized sensitive secrets and credentials from being committed to a Git repository. It scans commits and looks for regular patterns of credential information, and through the mechanism of a client-side Git hook, it alerts the developer to any unintended commits. Further, it also supports the ability to scan a repository's history of commits for any unauthorized commit activity. It is by default optimized for scanning for Amazon Web Services (AWS) credentials, but can be customized to look for custom credential string patterns.","Starter Kit:","Git Hook to install locally on your machine","To leverage this template, make sure to do the following:","Navigate to the git-secrets installation section, and follow the instructions per your platform","Run git secrets --install within your chosen repository","You should received a confirmation such as the below:","Register a secrets/credentials provider that helps the tool find specific types of credential patterns, e.g. AWS via git secrets --register-aws","Automation should be set up to scan for new commits, but it's a good idea to scan the history of commits starting out: git secrets --scan-history","If you receive no output, that means the tool found now problematic commits."]}],[{"l":"Continuous Testing Guide","p":["This this guide, we explore best practices for continuous testing - including exploring scenarios such as automated invocation of unit, regression and integration tests."]},{"l":"Use Cases","p":["In this section, we provide information about potentially useful use cases for continuous testing. The key idea is to provide some more nuanced context for the use cases such that technology (tool) solutions can be shared in context.","See list of use cases"]},{"l":"Trade Studies","p":["Here we provide a table of trade offs, feature comparisons, and metrics for a given set of reference architectures mapped to use case tool solutions. Choice of comparison points are solicited directly from community member feedback.","See list of trade studies"]},{"l":"Reference Architectures","p":["In this section, we provide reference architectures that map to select use case scenarios from the above section. The key idea is to provide an architecture / flowchart that simplifies the understanding of how a particular class of tools to satisfy a use case could be put together to help with continuous testing needs.","See list of reference architectures"]},{"l":"Starter Kits","p":["In this section, we provide code and configuration for encoding select reference architectures, with select tools chosen from trade studies, through to automation. The key idea for starter kits is to work with folks in the SLIM community to create template solutions that can be easily modified and deployed to enact a process improvement change. These solutions should serve to both provide example implementations and concrete references for getting started.","See list of starter kits"]}],[{"l":"Use Cases","p":["For all use cases below, we provide two resources:","Visual mind-map. Read this diagram left-to-right as an English language statement. The parent nodes represent components of a use case, and the leaf nodes (far right) represent tool solutions we think are appropirate for the use case. This file is rendered using https://markmap.js.org.","Markdown. This file has a one-to-one correspondance to the visual mind-map. Feel free to propose changes by submitting a pull request for this Markdown file on our GitHub. See contribution guide for details."]},{"l":"All Use Cases","p":["Preview of mind-map:","Versions:","Full Visualization Markdown"]}],[{"l":"Trade Studies","p":["Nothing here yet, come back soon..."]}],[{"l":"Reference Architectures","p":["Nothing here yet, come back soon..."]}],[{"l":"Starter Kits","p":["This page contains starter kit information, which represent templates, code and configuration to help you get started quickly with continuous testing best practices described in this overall guide. Please see categories and links below for details."]},{"l":"Software Composition Analysis","p":["This section contains links to sample actions, templates and configurations that analyze and validate composition of Open Source Software (OSS) components in software systems. Identifying software and licensing vulnerabilites and ensuring routine software updates is an OSS cybersecurity best practice."]},{"l":"Dependabot","p":["A GitHub ecosystem tool for dependency version and security vulnerability analysis."]},{"l":"Automated Dependency Updates","p":["Add Dependabot automation to your repository, either via the admin console or manually(choose one):","Admin console:(requires admin rights)","Copy the Dependabot configuration file from one of the SLIM Starterkit repos -- for example, dependabot.yml in the Python Starterkit-- into the root of your repository at .github/dependabot.yml.","Create an issue and an issue branch to implement a code change. Checkout the issue branch.","Dependabot is now installed and detections can be tracked through the dependency graph at Insights -> Dependency graph -> Dependabot. Pull Requests also will include automatically created Dependabot merges.","Discuss with your development team the cybersecurity best practice to regularly update OSS to latest versions and seek consensus on a workflow to accept proposed updates.","Manually:( approach available to all committers)","Modify Dependabot configurations for your project:","Optionally, value-added features may be set, including such settings as scheduling, a strategy for versioning and pull request reviewers.","Proceed to enable Dependabot alerts through GitHub Settings UI.","Requirement Set properties to match your repository setup, including core packaging system.","Set the package-ecosystem property to match your packaging system in dependabot.yml.","Set the target-branch to the name of your default branch in dependabot.yml.","Shortcut Copy the pre-set configuration to an identical path in your repository, e.g. .github/dependabot.yml.","SLIM Starterkit Python -- Dependabot Script to install in your GitHub repo","Starter Kit:","This Dependabot task provides an automated check for OSS component updates and automatically creates pull requests to commit new versions.","To leverage Dependabot, make sure to do the following:"]},{"l":"Automated Security Updates","p":["This Dependabot task automates security scanning for known vulnerabilities in OSS components and automatically creates pull requests to update flagged components.","Dependabot Security Updates requires Dependabot Automated Dependency Updates(see above). Although technically part of the same automation stack, it's enabled through the GitHub Settings UI. Optionally, dependency updates can be disabled so that only security updates create pull requests.","Requirement Install and set up the Starter Kit for Dependabot Automated Dependency Updates.","To leverage this template, make sure to do the following:","Discuss with your development team the cybersecurity best practice to regularly scan OSS components for security flaws and seek consensus on a workflow to accept proposed updates.","Enable Security Updates:","At Settings -> Code security and analysis -> Dependabot, select the Enable button to turn on Dependabot security updates.","Requirement Admin rights are necessary to modify Code security and analysis settings. 3. Modify Dependabot configurations for your project: (optional)","If only security-related pull requests are desired, set the open-pull-requests-limit property to 0 for updates block(s)."]}],[{"l":"Documentation Guide","p":["This this guide, we explore best practices for documentation - including for user guides, administrative guides, API documentation, discussions, and other documentation artifacts."]},{"l":"Use Cases","p":["In this section, we provide information about potentially useful use cases for documentation. The key idea is to provide some more nuanced context for the use cases such that technology (tool) solutions can be shared in context.","See list of use cases"]},{"l":"Trade Studies","p":["Here we provide a table of trade offs, feature comparisons, and metrics for a given set of reference architectures mapped to use case tool solutions. Choice of comparison points are solicited directly from community member feedback.","See list of trade studies"]},{"l":"Reference Architectures","p":["In this section, we provide reference architectures that map to select use case scenarios from the above section. The key idea is to provide an architecture / flowchart that simplifies the understanding of how a particular class of tools to satisfy a use case could be put together to help with documentation needs.","See list of reference architectures"]},{"l":"Starter Kits","p":["In this section, we provide code and configuration for encoding select reference architectures, with select tools chosen from trade studies, through to automation. The key idea for starter kits is to work with folks in the SLIM community to create template solutions that can be easily modified and deployed to enact a process improvement change. These solutions should serve to both provide example implementations and concrete references for getting started.","See list of starter kits"]}],[{"l":"Use Cases","p":["For all use cases below, we provide two resources:","Visual mind-map. Read this diagram left-to-right as an English language statement. The parent nodes represent components of a use case, and the leaf nodes (far right) represent tool solutions we think are appropirate for the use case. This file is rendered using https://markmap.js.org.","Markdown. This file has a one-to-one correspondance to the visual mind-map. Feel free to propose changes by submitting a pull request for this Markdown file on our GitHub. See contribution guide for details."]},{"l":"All Use Cases","p":["Preview of mind-map:","Versions:","Full Visualization Markdown"]}],[{"l":"Trade Studies","p":["Trade Study: User/Dev/Admin/API Doc Hosting Frameworks"]}],[{"i":"trade-study-userdevadminapi-doc-hosting-frameworks","l":"Trade Study: User/Dev/Admin/API Doc Hosting Frameworks","p":["Anchor Links","API Actions","Comment Support","Confluence","daux (TBD)","Diagram Editing","docsify (TBD)","docusaurus (TBD)","Draft Content","Embedded Content","Export Other Formats","Extension Support","Fast","File Uploads","Free (Mozilla Public License 2.0)","Free (with ads)","Free for OSS/ $$","Free for OSS/ $$$","Freemium (with limits)","Generate API Docs","GitBook","Hierarchial Structure","Import From Other Formats","Internationalization","Licensing","Limited","Managed Hosting","Markdown Support","mdBook","MkDocs (TBD)","No","No (embed/link only)","No (non-free plans only)","No (only non-free plugins)","No (satic hosts only)","No (static hosts only)","No (third-party only)","No(embed/link only)","Partial(as a preprocessor)","Partial(for embedded content)","ReadTheDocs","Render Time","RETYPE","Roles","Search","Self-Hosting","Templating Support","Tool Name","Usage Analytics","VCS Stored Content","Version Control","WYSIWYG Editing","Yes","Yes (with plugins)","Yes including doc packages"]}],[{"l":"Reference Architectures","p":["Nothing here yet, come back soon..."]}],[{"l":"Starter Kits","p":["This page contains starter kit information, which represent templates, code and configuration to help you get started quickly with documentation best practices described in this overall guide. Please see categories and links below for details."]},{"l":"Governance","p":["Project governance can be defined as the institutional mechanisms by which a project is organized and enacted. It consists of a set of roles, decision-making process and limitations that can be expected with how a project functions day-to-day and how that project interacts with new and existing contributors."]},{"i":"governance-model-markdown","l":"Governance Model (Markdown)","p":["Add a link to the GOVERNANCE.md to your README.md file within the Contributing section","Copy the template text and place in a file within your repository called GOVERNANCE.md","Liberal acceptance, encouragement and promotion of open source contributors from the public","Markdown of template","NASA AMMOS AERIE","node.js","OpenMCT","OpenSSL","PostgresQL","Retention of decision-making authority to sources of funding","Search and replace the [INSERT ... text within the file with specifics for your project","Talk with your team (including stakeholders) about leveraging this template, and seek wide agreement before you adopt. In particular, ensure there's buy-in for the philosophy of the governance approach (i.e. liberal acceptance of contributors) and role-based committees for governing (i.e. technical / project steering committees).","Template:","This governance model template seeks to generalize how most government-sponsored open source projects can expect to operate in the open source arena. It is targeted towards medium and large-sized teams. This template governance model can be included in your repository under the file name GOVERNANCE.md. There are two key philosophies behind this governance model to keep note of:","This template was developed by evaluating best GOVERNANCE.md practices in the following organizations:","To leverage this template, make sure to do the following:"]},{"l":"README","p":["This section contains links to sample README.md templates that can be used to help developers and users understand your repository concisely and clearly. For each readme template provided below, see the Markdown version for the raw template which you can copy/paste into your own README.md, and see the Demo for a working example of the template in action."]},{"l":"Software Project Template","p":["This template is meant for general software projects README.md files, including both interpreted as well as compiled language code.","Starter Kit:","Markdown of template","Demo of template","To leverage this template, make sure to do the following:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","Copy the template text, and place in a file within your repository called README.md","Search and replace the [INSERT ... text within the file with specifics for your project","Add a link to the CONTRIBUTING.md to your README.md file within the Contributing section","This starter kit template was developed by evaluating best README.md practices in the following organizations:","NASA-AMMOS","ReactJS","VueJS","Apache Kafka"]},{"l":"Code of Conduct","p":["The code of conduct is typically a document that provides guidance to a project team on how the team members should interact with each other. It identifies behaviors that are helpful for building a better development community, provides contact information for addressing grievances (should they arise), and finally lists key responses that team leadership should / will take for dealing with unexpected behavior. Below are some examples to expedite the incorporation of a code of conduct."]},{"l":"Contributor Covenant Template","p":["This is a community-developed code of conduct that has been adopted by many open source projects. It provides a fairly standard code of conduct that (1) explicitly identifies problematic behavior that's deemed unacceptable in team interactions, (2) who to contact if problematic behavior is identified, and (3) tiers of how team leadership can respond.","Starter Kit:","Markdown of template","Demo of template and demo of badge","Webpage for more information","To leverage this template, make sure to do the following:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","Copy the template text, and place in a file within your repository called CODE_OF_CONDUCT.md","Search and replace the [INSERT CONTACT METHOD] text within the file with a person, private e-mail list, or other form of contact for grievances to be addressed to","Add the contributor covenant badge () to your README.md file (example below)"]},{"l":"Contributing Guides","p":["A contribution guide is an important document directed at new contributors to your project - to help them in understanding what and how they may contribute. It can be used to outline expected requirements prior to contributions (i.e. acceptance of licensing terms, signing off on any developer agreements required) as well as to ensure the quality of contributions are in-line with expected project norms. If a developer asks how to contribute, please point them to this guide. This guide also itemizes essential ingredients necessary for a successful patch submission.","We provide a sample contribution guide template below, but please keep in mind to:","Modify and adapt to your project as needed. You may not need all features of the template guide.","Replace all instances of [INSERT ...] within the template with your project's specific environment."]},{"l":"Contributing Guide Template","p":["Add a link to the CONTRIBUTING.md to your README.md file within the Contributing section","Copy the template text, and place in a file within your repository called CONTRIBUTING.md","Demo of template","Development process","Django Contributors Guide","Facebook React Contribution Guide","Kubernetes Contributors Guide","Markdown of template","NASA-AMMOS Repositories","Open Source Guide","Prerequisites to contributing","SciKit Learn Contributors Guide","Search and replace the [INSERT ... text within the file with specifics for your project","Starter Kit:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","This template covers the following contributions areas:","This template was influenced by the following sources:","To leverage this template, make sure to do the following:","Ways to contribute: issues, code, documentation, media and questions, among other types of contributions"]},{"l":"Change Log","p":["A change log provides a human readable list of significant changes, additions, deprecations, removals for software over time. It is meant to be able to be read by people. Change logs should be documented within a file called CHANGELOG.md and be updated per key release. See semantic release for guidance on releasing cycles and versioning of your software.","‚ö†Ô∏è A CHANGELOG.md can replicate wording from a releases page (e.g. GitHub Releases), but should not be left out in place of a releases page. Down-stream inheritors of your software may not have access to your releases page, and will expect a CHANGELOG.md to be present as part of your software distribution."]},{"l":"Keep a Changelog","p":["This change log standard seeks to provide a template for human readable change logs, among other key guidance on the change logging process.","Starter Kit:","Guidance","Demo 1","Demo 2","Webpage","To leverage this template, make sure to do the following:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","Copy the demo CHANGELOG.md above, and place in a file within your repository called CHANGELOG.md","Edit the CHANGELOG.md file with your specific release information. If you have many historic releases prior to the creation of this file, mark the latest release as the first entry, and commit to updating this for future releases as the happen.","Add an entry to your README.md under the Changelog section to point to your CHANGELOG.md file."]},{"l":"Issue Templates","p":["Issue tickets help development teams keep the language of bug, feature, and other types of issues readable and consistent. Templates appear whenever a person submits a new issue, and helps guide that person in providing the key information that gives developers context for a given issue."]},{"i":"github-issues-markdown","l":"GitHub Issues (Markdown)","p":["GitHub issue markdown templates provide pre-filled structure, in markdown format, for people to enter issue information. Please see the documentation on GitHub templates for more details.","Starter Kits:","Bug Report","New Feature","To leverage these template, make sure to do the following:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","Create a new folder within your GitHub repository with the following path: .github/ISSUE_TEMPLATE","Copy the Bug Report and New Feature template files above into the following paths:",".github/ISSUE_TEMPLATE/bug_report.md",".github/ISSUE_TEMPLATE/new_feature.md","Commit the above two files to the main branch","Navigate to your issues tab within GitHub, and you should see options to use your new templates appear"]},{"i":"github-issues-forms","l":"GitHub Issues (Forms)","p":["GitHub issue forms are a method to provide a form like experience when filling out a new issue ticket. Please see the documentation on GitHub forms for more details.","‚ö†Ô∏è NOTE: GitHub issue forms are currently in beta. When using a third-party issue tracking system like ZenHub, the templates will not be usable in that system.","Starter Kits:","Bug Report","New Feature","To leverage these template, make sure to do the following:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","Create a new folder within your GitHub repository with the following path: .github/ISSUE_TEMPLATE","Copy the Bug Report and New Feature template files above into the following paths:",".github/ISSUE_TEMPLATE/bug_report.yml",".github/ISSUE_TEMPLATE/new_feature.yml","Commit the above two files to the main branch","Navigate to your issues tab within GitHub, and you should see options to use your new templates appear"]},{"l":"Pull Request Templates","p":["Pull requests are the currency for how contributions are made to projects. Having a pre-filled out pull request template offers guidance to your potential developers on how to contribute to your project."]},{"i":"github-pull-request-template-general","l":"GitHub Pull Request Template (General)","p":["GitHub provides a mechanism to automatically display a template whenever a potential contributor proposes a pull request to your repository. Please see the documentation on GitHub for details.","Starter Kits:","Pull Request Template","To leverage this template, make sure to do the following:","Talk with your team about leveraging this template, and seek wide agreement before you adopt","Create a new folder within your GitHub repository with the following path: .github/","Copy the Pull Request Template template file above into the following path:",".github/PULL_REQUEST_TEMPLATE.md","Commit the above file to the main branch","Whenever you propose a new pull request, your new templates should appear in the text box"]}],[{"i":"insert-project-name-project-governance","l":"[INSERT PROJECT NAME] Project Governance","p":["This governance model aims to create an open source community that encourages transparency, contributions, and collaboration, but maintains sound technical and quality standards. Our goal is to build a community comprised of members across the [INSERT PROJECT DOMAIN] community and beyond, including from private organizations, universities, government organizations, and international organizations.","The project follows a fairly liberal contribution model where people and/or organizations who do the most work will have the most influence on project direction. Roles determine decision making influence, and governing committees (e.g. technical steering, project steering) are set up to ensure the project's direction is in-line with requirements / goals while supporting flexibility for future growth and membership. Technical decision making will primarily be made through a \" consensus-seeking\" approach within the respective governing committees."]},{"l":"Roles","p":["‚úÖ","‚ùå","A subset of collaborators having technical decision making authority and admin privileges","Anyone downloading, deploying, or operating the software to meet a specific objective.","Anyone providing input to the project, including: code, issues, documentation, graphics, etc.","Collaborator","Comment in Tickets / Discussions","Commit","Contributor","Description","None","Overall manager of project with final authority over all key decisions when consensus cannot be reached","Product Manager","Project Decisions","Project Steering Committee Member","Propose Pull Request","Read/Clone","Restricted To","Review","Role","Sponsor organization representatives (i.e. those providing funding to the project) and key stakeholders with authority to guide project based on requirements, budget, schedule, etc.","Stakeholders","Subset of contributors demonstrating a strong familiarity with the project.","Subset of contributors granted write access to one or more of the project repositories upon selection by TSC","Technical Decisions","Technical Steering Committee Member","Triage","Triager","User"]},{"l":"User","p":["Anyone who has downloaded, deployed, or operated [INSERT PROJECT NAME] to meet a specific objective. This project was primarily designed for [INSERT DESCRIPTION OF PROJECT PURPOSE], but let us know if you've found other uses for it."]},{"l":"Contributor","p":["Contributors include anyone that provides input to the project. This includes code, issues, documentation, graphics, designs, or anything else that tangibly improves the project. We encourage you to start contributing right away by joining our [Discussions]([INSERT LINK TO DISCUSSION BOARD OR MAILING LIST(S)]) or submitting an [Issue]([INSERT LINK TO ISSUE TRACKING SYSTEM])."]},{"l":"Triager","p":["Subset of contributors who have demonstrated a strong familiarity with the project and are regularly contributing to the project via issue creation, commenting, discussions, etc. Triagers are given specific permissions do the following:","[List of current Triagers]([INSERT LINK TO GITHUB, GITLAB, ETC. TEAM ASSOCIATED WITH TRIAGERS])"]},{"l":"Collaborator","p":["Subset of contributors who have been given write access to one or more project repositories. Both contributors and collaborators can propose changes to the project via pull requests, but only collaborators can formally review and approve (merge) these requests. Any contributor who has made a non-trivial contribution should be on-boarded as a collaborator in a timely manner.","If you are planning on making a substantial contribution to the project or feel as though you should be given write access to a repository, please send a request to [INSERT LINK TO EMAIL/GITHUB USER HANDLE]","[List of current collaborators]([INSERT LINK TO GITHUB, GITLAB, ETC. TEAM ASSOCIATED WITH COLLABORATORS])"]},{"l":"Technical Steering Committee Member","p":["A subset of the collaborators forms the Technical Steering Committee (TSC). The TSC has authority over the following aspects of this project:","Technical direction and guidance","Committee governance and process","Contribution policy","Conduct guidelines","Maintaining the list of collaborators"]},{"l":"TSC Committee Members","p":["[INSERT MEMBER NAME] ([username1]([INSERT LINK TO USERNAME]), [INSERT ORG ASSOCIATION]"]},{"l":"TSC Emeriti","p":["[INSERT MEMBER NAME] ([username1]([INSERT LINK TO USERNAME]), [INSERT ORG ASSOCIATION]","The TSC is primarily responsible for the following project repositories:","[INSERT LINK TO PROJECT REPOSITORIES]","However, the TSC also has the responsibility to interface with and monitor third-party dependencies of the project for key changes impacting [INSERT PROJECT NAME]. These third-party dependencies include:","[INSERT LINK TO DEPENDENT PROJECT REPOSITORIES]"]},{"l":"Decision Making Process","p":["Any community member can create an issue or comment asking the TSC to review something. Prior to implementing a substantial contribution, the design of that contribution should be reviewed by at least one member of the TSC. If consensus-seeking fails during the review of a pull request or in design discussions, the issue will be addressed by the TSC to make a determination on direction. TSC members will meet regularly and will keep track of decisions made when consensus was not met.","The TSC can nominate new members at any time. Candidates for membership tend to be collaborators who have shown great dedication to the project and/or experts in a particular domain or project component. TSC members are expected to be active contributors or members who have made significant contributions within the past 12 months."]},{"i":"project-management-committee-pmc-member","l":"Project Management Committee (PMC) Member","p":["The Project Management Committee (PMC) is made up of sponsor organization representatives (i.e. those providing funding to the project) and key stakeholders who rely or plan to rely on the project to meet a critical need. The PMC has the following responsibilities:","Maintaining the overall project roadmap","Determining project requirements and commitments to sponsors and stakeholders","Assessing available resources and allocating them across the project","Monitoring and reporting on progress against the roadmap","On-boarding new sponsors and stakeholders","Overall project governance (including this policy)","Addressing any legal considerations"]},{"l":"PMC Committee Members","p":["[INSERT MEMBER NAME] ([username1]([INSERT LINK TO USERNAME]), [INSERT ORG ASSOCIATION]"]},{"l":"PMC Emeriti","p":["[INSERT MEMBER NAME] ([username1]([INSERT LINK TO USERNAME]), [INSERT ORG ASSOCIATION]"]},{"l":"Scope","p":["The PMC has management authority over the same project repositories over which the TSC has technical authority over."]},{"i":"decision-making-process-1","l":"Decision Making Process","p":["The PMC will consist of a product manager and additional representative from sponsors and key stakeholders. The PMC or sponsoring organizations can nominate new members at any time. Care should be taken not to include too many members from a single stakeholder project or organization.","Regular stakeholder meetings are held to discuss current project status and propose changes to the project roadmap. If stakeholder representatives and sponsors concur with these proposals during the meeting, they will be immediately adopted. A member of the PMC will ensure the changes have been captured and recorded. Regular stakeholder meetings will be open to the entire community, but only members of the PMC have decision making authority.","Additional meetings may be held if consensus is not met or to discuss significant changes to the roadmap due to changes in stakeholder priorities or available resources. Any decision made outside of stakeholder meetings must still be approved by all sponsors and stakeholders. If full consensus cannot be made, the product manager has the final authority to determine project direction. Any non-concurrences from stakeholders or sponsors will be noted."]},{"l":"Product Manager","p":["Overall manager of the project with final authority over all key decisions when consensus cannot be reached within the TSC or PSC. The product manager is often chosen at the onset of project initiation and can be reassigned by the PMC (with institutional approval, if applicable)."]},{"l":"Acknowledgements","p":["Much of this governance model was adapted from the other notable open source projects including node.js, OpenSSL, PostgresQL, and OpenMCT. We would like to thank those projects for setting the foundation upon which this model was built."]}],[{"l":"Contributing to SLIM","p":["Thanks for taking the time to consider contributing! We very much appreciate your time and effort. This document outlines the many ways you can contribute to our project, and provides detailed guidance on best practices. We look forward to your help!"]},{"l":"Introduction","p":["SLIM is a joint, community-based effort at collective software process improvements. Therefore, we need your help! Here's the basics on contributing:","Anyone can contribute!","You can contribute at any time","You can contribute in any way (code, documentation, discussion topics, issue ticket discussions, etc.)","We plan out our work into fiscal quarters (i.e. Oct - Dec as Q1, Jan - Mar as Q2, etc.). This helps our stakeholders (the folks using our process improvements) plan to incorporate process improvements better into their schedules. See our Planning Board for our most up-to-date plan. Generally speaking, we try to get together with our stakeholders and our community contributors at the start of every fiscal quarter to plan out what we should work on. That being said, since we're an open source project, we also accept and encourage ad-hoc contributions at any time - just note it may take some time to review / decide whether to incorporate."]},{"l":"Quickstart to Contributing"},{"l":"Contributing via our Planning Cycles","p":["See our open list of issue tickets and pick a ticket(s) you're interested in, that can also potentially apply to a project you'd like to infuse improvements into. Note: it is useful to scan through labels like how requested (popular) a particular issue ticket is (via labels: 'requested', 'more requested', 'most requested') as well as by scanning labels that describe how complex the ticket is (i.e. 'low complexity', 'medium complexity', 'high complexity').","Pick a fiscal quarter you‚Äôd like to resolve your tickets in. See our Planning Board\"iteration\" column for possible fiscal quarters. At the start of every fiscal quarter, contributors will be asked to pick what they'd like to work on.","Be a leader to help infuse those process improvement solutions (tickets resolved) back to your existing projects. What does that entail? It means you take ownership of your issue tickets and the associated process improvement and help your project infuse what you worked on! You can also help other projects that are interested in your process improvement. Tip: tag your project team members on the ticket by via their GitHub handles, to make it clear who will be interested in using your process improvement.","NOTE: taking ownership (being assigned a ticket) requires that they be a member of the SLIM project. Reach out to @riverma for how to join the team! Also, see our Ways to Contribute section for more details and guidance on contribution style."]},{"l":"Contributing Any Other Time","p":["See our Ways to Contribute section."]},{"l":"Prerequisites","p":["Before you begin contributing to our project, it'll be a good idea to ensure you've satisfied the below pre-requisites."]},{"i":"developer-certificate-of-origin-dco","l":"Developer Certificate of Origin (DCO)","p":["To accept your contributions for any kind of patch, you'll want to:","Understand what a Developer Certificate of Origin is. See this guide.","Read and agree to the terms of the Developer Certificate of Origin.","Remember to add your Sign-Off for each patch contribution you submit to our project via either:","By using the -s flag if using Git. See these instructions.","By including the following text in your patch contributions (i.e. pull requests)","Reviewers reviewing your patch will look for the sign-off before deciding to accept your contribution."]},{"l":"License","p":["Our project has our licensing terms, including rules governing redistribution, documented in our LICENSE file. Please take a look at that file and ensure you understand the terms. This will impact how we, or others, use your contributions."]},{"l":"Code of Conduct","p":["Our Code of Conduct helps facilitate a positive interaction environment for everyone involved with the team, and provides guidance on what to do if you experience problematic behavior. Read more in our CODE_OF_CONDUCT.md, and make sure you agree to its terms."]},{"l":"Developer Environment","p":["For patch contributions, see our Developer Documentation (TBD) for more details on how to set up your local environment, to best contribute to our project.","At a minimum however to submit patches (if using Git), you'll want to ensure you have:","An account on the Version Control System our project uses (i.e. GitHub).","The Version Control System client (i.e. Git) installed on your local machine.","The ability to edit, build, and test our project on your local machine. Again, see our README.md or detailed developer guide for more details"]},{"l":"Communication Channels","p":["Before contributing changes to our project, it's a great idea to be familiar with our communication channels and to socialize your potential contributions to get feedback early. This will help give you context for your contributions, no matter their form.","Our communication channels are:","Issue tracking system- a regularly monitored area to report issues with our software or propose changes","Discussion board- an permanently archived place to hold conversations related to our project, and to propose as well as show+tell topics to the contributor team. This resource can be searched for old discussions."]},{"l":"Our Development Process","p":["Our project integrates contributions from many people, and so we'd like to outline a process you can use to visualize how your contributions may be integrated if you provide something."]},{"l":"Fork our Repository","p":["Forking our repository, as opposed to directly committing to a branch is the preferred way to propose changes.","See this GitHub guide on forking for information specific to GitHub.com"]},{"l":"Find or File an Issue","p":["Make sure people are aware you're working on a patch! Check out our issue tracking system and find an open issue you'd like to work against, or alternatively file a new issue and mention you're working on a patch."]},{"l":"Choose the Right Branch to Fork","p":["Our project typically has the following branches available, make sure to fork either the default branch or a branch someone else already tagged with a particular issue ticket you're working with.","main- default branch, and contains mature SLIM deliverables and should be the typical branch you fork","develop- active development area for SLIM deliverables, and typically ahead of main","retype- live rendering of SLIM website, auto-generated by changes committed to main branch via a GitHub Action"]},{"l":"Make your Modifications","p":["Within your local development environment, this is the stage at which you'll propose your changes, and commit those changes back to version control. See the README.md or development guide for more specifics on what you'll need as prerequisites to setup your local development environment."]},{"l":"Commit Messages","p":["Commit messages to version control should reference a ticket in their title / summary line:","This makes sure that tickets are updated on GitHub with references to commits that are related to them.","Commit should always be atomic. Keep solutions isolated whenever possible. Filler commits such as \"clean up white space\" or \"fix typo\" should be merged together before making a pull request, and significant sub-feature branches should be rebased to preserve commit history. Please ensure your commit history is clean and meaningful!","Additionally, remember to \"Sign-Off\" on your commits to align with our Developer Certificate of Origin (DCO) policy."]},{"l":"Submit a Pull Request","p":["Pull requests are the core way our project will receive your patch contributions. Navigate to your branch on your own fork within the version control system, and submit a pull request or submit the patch text to our project.","Please make sure to provide a meaningful text description to your pull requests, whenever submitted. Our pull-request template will be auto-generated for you when you create your pull-request. See the template here.","Working on your first Pull Request? See guide: How to Contribute to an Open Source Project on GitHub"]},{"l":"Reviewing your Pull Request","p":["Reviewing pull-requests, or any kinds of proposed patch changes, is an art. That being said, we follow the following best practices:","Intent- is the purpose of your pull-request clearly stated?","Solution- is your pull-request doing what you want it to?","Correctness- is your pull-request doing what you want it to correctly?","Small Patches- is your patch of a level of complexity and brevity that it can actually be reviewed by a human being? Or is does it involve too much content for one pull request?","Coding best practices- are you following best practices in the coding / contribution language being used?","Readability- is your patch readable, and ultimately maintainable, by others?","Reproducibility- is your patch reproducible by others?","Tests- do you have or have conducted meaningful tests?"]},{"l":"Ways to Contribute"},{"i":"issue-tickets","l":"‚ö†Ô∏è Issue Tickets","p":["Do you like to talk about new features, changes, requests?","Issue tickets are a very simple way to get involved in our project. It also helps new contributors get an understanding of the project more comprehensively. This is a great place to get started with the project if you're not sure where to start.","See our list of issues at: https://github.com/NASA-AMMOS/slim/issues"]},{"l":"Cleaning up Duplicate Issues","p":["Often we receive duplicate issues that can confuse project members on which issue ticket to hold conversations upon.","Here's how you can help:","Scan the list of open issue tickets for duplicate titles, or internal wording","If you find duplicates, copy / paste the below message on the conversation thread of the issue ticket that has less participants involved"]},{"l":"Good First Issues","p":["Issue tickets can vary in complexity, and issues labeled with good first issue labels are often a great way to get started with the project as a newcomer.","Take a look at our issue tracking system, and filter by good first issue for issues that are low-complexity, and that will help you get familiar with our issue tracking and patch submission process."]},{"l":"Suggesting New Issue Labels","p":["Labels within our issue tracking system are a great way to quickly sort through tickets. The project may not yet have labels to cover the full variety of issue tickets. Take a look through our list of issues, and if you notice a set of issue tickets that seem similar but are not categorized with an existing label, go ahead submit a request within one of the issues you've looked at with the following text:"]},{"l":"Submitting Bug Issues","p":["Resolving bugs is a priority for our project. We welcome bug reports. However, please make sure to do the following prior to submitting a bug report:","Check for duplicates- there may be a bug report already describing your issue, so check the issue tracking system first.","Here's some guidance on submitting a bug issue:","Navigate to our issue tracking system and file a new issue","Select a bug template (if available) for your issue","Fill out the template fields to the best of your ability, including output snippets or screenshots where applicable","Follow the general guidelines below for extra information about your bug","Include a code snippet if you have it showcasing the bug","Provide reproducible steps of how to recreate the bug","If the bug triggers an exception or error message, include the full message or stacktrace","Provide information about your operating system and the version of our project you're using"]},{"l":"Submitting New Best Practice Guide Requests","p":["We welcome new best practice guides / process improvement guides to help grow best practice guides. However, please make sure to do the following prior to submitting a request:","Check for duplicates- there may be an issue ticket already describing your request, so check the issue tracking system first","Consider adding to existing guides- is your best practice / process improvement guide really needed? Or is there an existing guide which could be improved instead to incoporate your request?","Cross-cutting- is your proposed process improvement need cross-cutting? Or is it very specific to your project? We strive for offerring cross-cutting, and more general guides in this project so please make sure your guide request is a general need that could be applicable to many SLIM community-member projects.","Here's some guidance on submitting a new best practice guide request:","Navigate to our issue tracking system and file a new issue","Select the new best practice guide request template button","Fill out the template fields to the best of your ability"]},{"i":"submitting-best-practice-guide-change--improvement-requests","l":"Submitting Best Practice Guide Change / Improvement Requests","p":["We welcome changes and improvements to our existing best practice guides. However, please make sure to do the following prior to submitting a request:","Check for duplicates- there may be an issue ticket already describing your change / improvement request, so check the issue tracking system first","Cross-cutting- is your proposed change / improvement to a guide need cross-cutting? Or is it very specific to your project? We strive for offerring cross-cutting, and more general guides in this project so please make sure your change request is a general solution that could be applicable to many SLIM community-member projects.","Here's some guidance on submitting a best practice guide change request:","Navigate to our issue tracking system and file a new issue","Select the new best practice guide change / improvement request template button","Fill out the template fields to the best of your ability"]},{"l":"Submitting Process Improvement Need Requests","p":["Process improvement need requests are the atomic needs that represent SLIM community challenges. Needs are often aggregated together to develop comprehensive guides. You can help us identify and fill out needs that can help SLIM assess which process improvement needs are most important. However, please make sure to do the following prior to submitting a request:","Check for duplicates- there may be an issue ticket already describing your change / improvement request, so check the issue tracking system first","Here's some guidance on submitting a process improvement need request:","Navigate to our issue tracking system and file a new issue","Select the new process improvement need request template button","Fill out the template fields to the best of your ability"]},{"l":"Submitting Website Feature Requests","p":["Our SLIM website is constantly evolving, and you can help us by submitting reqeuests for new features. However, please make sure to do the following prior to submitting a request:","Check for duplicates- there may be an issue ticket already describing your change / improvement request, so check the issue tracking system first","Here's some guidance on submitting a website feature request:","Navigate to our issue tracking system and file a new issue","Select the website feature request template button","Fill out the template fields to the best of your ability"]},{"l":"Submitting Security Vulnerability Issues","p":["Security vulnerabilities should not be filed to the regular issue tracking system.","Report your security vulnerabilities to (see contact links): https://github.com/riverma","Please be sure to:","Indicate the severity of the vulnerability","Provide any workarounds, if you know them","Provide return-contact information to follow-up with you if needed"]},{"l":"Reviewing Pull Requests","p":["Reviewing others' contributions is a great way to learn about best practices in both contributions as well as software.","Take a look at our pull requests tracking system, and try the following options for providing a review:","Read the code / patch associated with the pull-request, and take note of any coding, bug, or documentation issues if found","Try to recreate the pull-request patch on your local machine, and report if it has issues with your system in particular","Scan over suggested feedback from other contributors, and provide feedback if necessary"]},{"i":"documentation","l":"\uD83D\uDCD6 Documentation","p":["Documentation is the core way our users and contributors learn about the project. We place a high value on the quality, thoroughness, and readability of our documentation. Writing or editing documentation is an excellent way to contribute to our project without performing active coding.","‚ö†Ô∏è It's highly advised that you take a look at our issue-tracking system before considering any documentation contributions. Here's some guidelines:","Check if any duplicate issues exist that cover your documentation contribution idea / task, and add comments to those tickets with your thoughts.","If no duplicates exist, create a new issue ticket and get a conversation started before making documentation changes.","Some guidelines for documentation best practices (summarized from Google's excellent documentation guide):","Minimum viable docs- don't do less documentation than your readers need, but also don't do more","Changed best practice use cases = changed docs- if your best practice use cases have changed, remember to update your documentation","Delete old docs- continually clean your documentation tree, and remove outdated docs regularly"]},{"l":"Documentation Organization","p":["**/*.yml- RETYPE configuration files for webpage rendering","BEST PRACTICE GUIDE NAME- folder containing a given best practice guide","CODE_OF_CONDUCT.md- best practices and guidance on how to work well with other people in the project, and suggestions on dealing with interpersonal issues","CONTRIBUTING.md- guidance on contributing to the project","Discussion Board- discussions related to SLIM","Discussion Boards","Ensure you have development prerequisites cleared.","For directions on contributing to our source-controlled documentation:","Go through our development process, including proposing changes to our project.","Have your development environment set up properly.","markmap.html- the visual rendering of a given markmap.md file using Markmap.js","markmap.md- a Markdown file containing a list of hierarchial, bullet-point list of use cases, describing relationships between tool / solutions and the use cases that prompt their needs. The formatting of this file follows the convention of Markmap.js","README.md- a descriptor file describing and linking to reference architecture resources","README.md- a descriptor file describing and linking to starter kit resources","README.md- a descriptor file describing and linking to trade study resources","README.md- a descriptor file describing and linking to use case resources","README.md- top-level information about how to run, build, and contribute to the project","reference-architectures- folder containing reference architectures for a particular use case","Source-controlled documentation","STARTER KIT NAME- folder containing a given starter kit's template, code, or resource files","STARTER KIT RESOURCE- a code file, template, or any other kind of starter kit resource providing an automation soluton to meet a given use case need within the use-cases markmap.md file","starter-kits- folder containing starter kits and automation solutions for a particular use case","The overall structure of our project documentation is as follows:","trade-studies- folder containing trade studies of tools / solutions for a particular use case","trade-study-\\*.md- a Markdown table formatted file containing a trade study / evaluation of a given set of tools mapping to a particular use case within the use-cases markmap.md file","use-cases- folder containing important uses and scenarios relevant for a particular best practice need"]},{"l":"Writing Style","p":["To ensure documentation is readable and consistent by newcomers and experts alike, here are some suggestions on writing style for English:","Use gender neutral pronouns (they/their/them) instead of he/she/his/her","Avoid qualifiers that minimize the difficulty of a task at hand, e.g. avoid words like ‚Äúeasily‚Äù, ‚Äúsimply‚Äù, ‚Äújust‚Äù, ‚Äúmerely‚Äù, ‚Äústraightforward‚Äù, etc. Readers' expertise may not match your own, and qualifying complexity may deter some readers if the task does not match their level of experience. That being said, if a particular task is difficult or complex, do mention that."]},{"l":"Common Wording","p":["Below are some commonly used words you'll want to leverage in your documentation contributions:","GitHub- one word, and capitalization of the 'G' and the 'H'","SLIM- one word, all capitalized"]},{"l":"Contributing A Best Practice Guide","p":["Researching, sharing, and disseminating best practices is the bread-and-butter of the SLIM effort. We welcome folks who wish to (1) help provide best practice solutions for active / open needs (link TBD) as well as those who'd like to contribute best practice solutions for new needs that you may already have great solutions for. Additionally, we welcome (2) iterative improvements for existing best practice solutions already shared on the SLIM repository.","Let's explore each of these sub categories for contributing best practices:"]},{"l":"Adding a New Best Practice Guide","p":["The following is a checklist before you start work on developing new, best practice guide:","Ensure there's a ticket in our issue tracking system for your new best practice guide idea, feel free to create a ticket if none exist","Check the Forum for any conversations regarding the best practice need(s) to ensure you have any needed context. Feel free to reach out and ask the community for feedback if you have ideas you'd like to discuss","Fork the SLIM repository into your own GitHub account so that you can work independently and eventually propose a pull request back to the SLIM project","Run the GitHub Actions Workflow for generating a Best Practices directory tree for you to work within (TBD)","Once you have a tangible issue you're going to work against, you can begin the process to contribute your best practice guide. The process is not strictly about code development or documentation, rather, it is a multi-step process to ensure your best practice solution is going to meet a tangible community need. We want to help make sure your best practice solution is not only incorporated into SLIM, but actively used!","‚ö†Ô∏è NOTE: we recommend engaging with the SLIM community throughout the process, but if you've already created some best practice solutions you just want to document, then you can skip some of the community soliciting steps below and get feedback directly as you're developing your documentation.","The following flowchart provides guidance on the best recommended process for developing and sharing a best practice solution."]},{"l":"Recommended Process for Contributing a Best Practice Solution to SLIM"},{"l":"Understanding the Recommended Process","p":["An assessment of which use case(s) are highest priority to the community. You'll use this to help provide some focus on the scope of reference architectures you should document for your use cases","Any other suggestions / fixes Also consider reaching out to the community via our communication channels for feedback and engagement for your pull request. Providing an visual example of your modifications is highly encouraged. After your pull request has been evaluated, and you've incorporated change requests / feedback from the community, a maintainer for the project will decide and work towards merging your changes into SLIM for everyone to benefit from.","Choose a Use Case- in this step, you'll want first pick a \"branch\" in your markmap rendering, or non-leaf-node item within your use cases markdown file, that has a list of solutions / tools underneath it that offer SLIM community members some decisions to make based on a trade-study you'll create.","Choose a Use Case- in this step, you'll want first pick a \"branch\" in your markmap rendering, or non-leaf-node item within your use cases markdown file, that has a list of solutions / tools underneath it.","Create a Starter Kit- here, you will want to spend some dedicated time to create a starter kit. A starter kit can be anything that helps SLIM community members automate some aspect of the use use case you've picked. For example, for our \"Documentation Hosting\" best practice guide, we offer Markdown templates for various types of documentation categories - thus starter kits don't just need to be code or configuration. Think of starter kits as some form of automation that can be quickly and easily infused into SLIM community member projects, with minor adjustments. Additionally, it's always a good idea to make your starter kit as generic as possible, including using environment variables to allow SLIM community members to customize the starter kit easily. Add your starter kit scripts or configuration to the starter-kits/ folder within your best practices parent folder and see examples in other best practice guides for guidance.","Create Pull Request- in this step, you'll want to create a pull-request for the SLIM community to get feedback on:","Create Reference Architecture Diagrams- in this step, take the use case you've chosen and create an architectural reference diagram for it to illustrate how your solutions / tools address the use case. It's a little bit of an art at this point, but you'll want to keep the level of abstraction high enough that specific solution / tools can be swapped in or out but your diagram will still remain valid. The key idea here is to provide a reference architecture that's largely tool-agnostic, and can be used by SLIM community members easily to understand how a best practice solution data or process flow may look like. The recommended diagramming language here is the Mermaid markdown diagramming tool that has native Markdown integrations. This way, diagrams can be easily understood, version controlled, and edited by multiple people. We recommend you follow this tutorial to get started with this framework, use the flowchart diagram feature, and document your flow chart architecture diagram in /reference-architectures/ref-archi-XYZ.md. We also recommend you edit your mind-map markdown files to link to your reference architecture diagrams using hyperlinks. See Markmap examples for hyperlinking.","Create Use Cases Diagram- here you'll want to diagram the research you've collected on scenario / use cases and tools in a format that SLIM community members can easily understand and comment on. The diagramming approach we're recommending with use cases is to create a mind-map. See the Wikipedia article on mind mapping for more information about the technique. To generate consistent mind map diagrams, we're suggesting you use a tool called MarkMap both because it creates interactive mind-maps and because it support diagrams being version controlled and easily edited by multiple people. What you'll want to do is to edit the /use-cases/markmap.md document in your local directory with use case and tool information you've researched. Add parent nodes for use cases and leaf nodes for tools within the markdown file. The use cases should come first, and be broken down into categories that logically model the tree of use cases you've collected. You can be as limited or as comprehensive as you like with the use cases, the key is to make sure the use cases are readable. A suggestion is to prefix the parent / child node relationships in this file with English-language prepositions (e.g. In, From, To) for the use case information and the keyword \"Using\" for the tool information. For example, a parent-child relationship within your markdown file to help share best practices for documentation hosting could be:","Infuse Starter Kits- this is the final recommended step of the creating a guide. The key point of creating starter kits is to infuse them in SLIM community member projects in a consistent way. Since you've worked so hard to make a starter kit, now is the time to propose the starter kit to as many SLIM community member projects as possible! We recommend two methods of infusion:","Once you've documented your use cases and tools within the respective markmap.md file, you'll just need to add and commit your file to GitHub, where an automated GitHub Action (markmap) will auto-generate an equivalent markmap.html rendering of your markdown file and commit it to the same directory where you've stored the markmap.md file (inside the use-cases directory).","Perform Trade Study- for the \"branch\" use case you picked in step 1, you'll now want to do some research on important metric criteria by which to evaluate possible tools / solutions. Consider things like important feature differences, performance, monetary cost, maturity, etc., when choosing criteria to evaluate the solution / tools for your use case upon. In terms of actually documenting your trade-studies, we recommend using markdown tables, this way the documentation you write can be easily viewed, version controlled, and modified by multiple people. Add your diagrams to the trade-studies/ folder within your best practices parent folder. See the existing examples available in best practice guides for guidance.","Pull Request- in this step, you'll want to create a pull-request for the SLIM community to get feedback on:","Reach out to SLIM community member projects and socialize your new starter kit to gain interest. Leverage our communication channels for this purpose.","Reference Architectures","Research Use Cases- search the internet, read books, articles, and talk to folks to understand which scenarios and use cases may apply to the process improvement need. For example, if the need is something like \"Living documentation best practices for development lifecycle artifacts\" then some use cases could involve things like Automated PyDoc documentation generation from code, User guide generation from static GitHub flavored Markdown. Basically, consult the community and literature to get specific on the pressing use case scenarios for this need, and identify tools that may help support or satisfy this need.","Starter Kits","Taking the initiative and creating pull requests or text-file patches using your starter kits for SLIM community member projects. Many SLIM community member projects are busy and may not have the time to propose your starter kits on their own, so leverage the best practice of open development and propose a starter kit to some aspect of their codebase.","The coverage of use cases in your diagram (e.g. are you missing critical use cases?)","The ease-of-use of your starter kit","The level-of-abstraction of your diagram, and whether its appropriate to generalize the tools you have outlined","The scope of metrics you've chosen to perform your trade study upon","The scope of steps within your architecture diagram","The understandability of your metric values, for the given solution / tools you're evaluating","The usefulness of your starter kit","To help you understand the recommended process diagrammed above, this section explains each component of the diagram:","Trade Studies","Use Cases"]},{"l":"For Adding Improvements to an Existing Best Practice Guide","p":["The Adding a New Best Practice Guide section explains in detail how to add a new best practice guide. Adding improvements to an existing guide follows the same principles of creating a new guide. Please see the Adding a New Best Practice Guide section for detailed guidance on how to add content to an existing guide - including proposing pull requests.","The following is a checklist before you start contributing to an existing best practice guide:","Ensure there's a ticket in our issue tracking system for your improvement, feel free to create a ticket if none exist","Check the Forum for any conversations regarding the best practice need(s) to ensure you have any needed context. Feel free to reach out and ask the community for feedback if you have ideas you'd like to discuss","Fork the SLIM repository into your own GitHub account so that you can work independently and eventually propose a pull request back to the SLIM project"]},{"l":"Inline Code Documentation","p":["For language-specific guidance on code documentation, including style guides, see Google's list of language style guides for a variety of languages.","Additionally, take a look at Google's recommendations on inline code documentation for best practices."]},{"l":"Media","p":["Media, such as such as images, videos, sound files, etc., are an excellent way to explain documentation to a wider audience more easily. Include media in your contributions as often as possible.","When including media into our version-control system, it is recommended to use formats such as:","Diagrams: Mermaid format","Images: JPEG format","Videos: H264 MPEG format","Sounds: MP3 format"]},{"i":"questions","l":"‚ùì Questions","p":["Answering questions is an excellent way to learn more about our project, as well as get better known in our project community.","Here are just a few ways you can help answer questions for our project:","Answer open questions in our discussion forum","Answer open questions mentioned in our issue tracking system","When answering questions, keep the following in mind:","Be polite and friendly. See our Code of Conduct recommendations as you interact with others in the team.","Repeat the specific question you are answering, followed by your suggestion.","If suggesting code, repeat the line of code that needs to be altered, followed by your alteration","Include any post-steps or checks to verify your answer can be reproduced"]},{"i":"design","l":"\uD83C\uDFA8 Design","p":["Design files can help to guide new features and new areas of expansion for our project. We welcome these kinds of contributions.","Here are just a few ways you can help provide design recommendations for our project:","Create visual mockups or diagrams to increase usability of our project applications. This can apply to user interfaces, documentation structuring, or even code architecture diagrams.","Conduct user research to understand user needs better. Save your findings within spreadsheets that the project team / contributors can review.","Create art, such as logos or icons, to support the user experience for the project","Each of the above can be contributed directly to repository code, and you should use our development process to contribute your additions."]},{"i":"meetups","l":"\uD83C\uDF9FÔ∏è Meetups","p":["A great way to contribute towards our project goals is to socialize and encourage people to meet and learn more about each other. Consider ideas like:","Propose workshops or meetups regarding some topic within our project","Help point project contributors and community members to conferences and publications where they may socialize their unique innovations","Schedule in-person or virtual happy-hours to help create a more social atmosphere within the project community","For the above ideas, use our communication channels to propose get-togethers."]}],[{"l":"Contributor Covenant Code of Conduct"},{"l":"Our Pledge","p":["We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.","We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."]},{"l":"Our Standards","p":["Examples of behavior that contributes to a positive environment for our community include:","Demonstrating empathy and kindness toward other people","Being respectful of differing opinions, viewpoints, and experiences","Giving and gracefully accepting constructive feedback","Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience","Focusing on what is best not just for us as individuals, but for the overall community","Examples of unacceptable behavior include:","The use of sexualized language or imagery, and sexual attention or advances of any kind","Trolling, insulting or derogatory comments, and personal or political attacks","Public or private harassment","Publishing others' private information, such as a physical or email address, without their explicit permission","Other conduct which could reasonably be considered inappropriate in a professional setting"]},{"l":"Enforcement Responsibilities","p":["Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.","Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate."]},{"l":"Scope","p":["This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event."]},{"l":"Enforcement","p":["Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at (see contact links): https://github.com/riverma. All complaints will be reviewed and investigated promptly and fairly.","All community leaders are obligated to respect the privacy and security of the reporter of any incident."]},{"l":"Enforcement Guidelines","p":["Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:"]},{"l":"1. Correction","p":["Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.","Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested."]},{"l":"2. Warning","p":["Community Impact: A violation through a single incident or series of actions.","Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban."]},{"l":"3. Temporary Ban","p":["Community Impact: A serious violation of community standards, including sustained inappropriate behavior.","Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban."]},{"l":"4. Permanent Ban","p":["Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.","Consequence: A permanent ban from any sort of public interaction within the community."]},{"l":"Attribution","p":["This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.","Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.","For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."]}]]